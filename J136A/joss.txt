                $             ,4410
U000E000+    U  0     $  0     $  0     STN TABLE -- STATE
U000E001     *  0     L  0     L  0
U000E002     *  1     L  0     L  0
U000E003     *  2     L  0     L  0
U000E004     *  3     L  0     L  0
U000E005     *  4     L  0     L  0
U000E006     *  5     L  0     L  0
U000E007     *  6     L  0     L  0
U000E008     *  7     L  0     L  0
U000E009     *  8     L  0     L  0
U000E010     *  9     L  0     L  0,
U001E000+    U  1     $  0     $  0     STN TABLE -- CURRENT BUFFER
U001E001     *  0 100 0000 000 0000
U001E002     *  1 100 0000 000 0000
U001E003     *  2 100 0000 000 0000
U001E004     *  3 100 0000 000 0000
U001E005     *  4 100 0000 000 0000
U001E006     *  5 100 0000 000 0000
U001E007     *  6 100 0000 000 0000
U001E008     *  7 100 0000 000 0000
U001E009     *  8 100 0000 000 0000
U001E010     *  9 100 0000 000 0000,
U002E000+    U  2     $  0     $  0     STN TABLE -- DRUM ASSIGNMENT
U002E001     *  0 100 0000 000 0000
U002E002     *  1 100 0000 000 0000
U002E003     *  2 100 0000 000 0000
U002E004     *  3 100 0000 000 0000
U002E005     *  4 100 0000 000 0000
U002E006     *  5 100 0000 000 0000
U002E007     *  6 100 0000 000 0000
U002E008     *  7 100 0000 000 0000
U002E009     *  8 100 0000 000 0000
U002E010     *  9 100 0000 000 0000,
U003E000+    U  3     $  0     $  0     STN TABLE -- NEXT STN IN SAME STATE
U003E001     *  0        1        1
U003E002     *  1        2        2
U003E003     *  2        3        3
U003E004     *  3        4        4
U003E005     *  4        5        5
U003E006     *  5        6        6
U003E007     *  6        7        7
U003E008     *  7        8        8
U003E009     *  8        9        9
U003E010     *  9 100 0000 000 0000,
U004E000+    U  4     $  0     $  0     STN TABLE -- TIME OF LAST ACTIVITY
U004E001     *  0 100 0000 000 0000
U004E002     *  1 100 0000 000 0000
U004E003     *  2 100 0000 000 0000
U004E004     *  3 100 0000 000 0000
U004E005     *  4 100 0000 000 0000
U004E006     *  5 100 0000 000 0000
U004E007     *  6 100 0000 000 0000
U004E008     *  7 100 0000 000 0000
U004E009     *  8 100 0000 000 0000
U004E010     *  9 100 0000 000 0000,
U004E000+    U  5     $  0     $  0     BUFFER TABLE--NEXT OPEN BUFFER
U004E001     *  0        1        1
U004E002     *  1        2        2
U004E003     *  2        3        3
U004E004     *  3        4        4
U004E005     *  4        5        5
U004E006     *  5        6        6
U004E007     *  6        7        7
U004E008     *  7        8        8
U004E009     *  8        9        9
U004E010     *  9       10       10
U004E011     * 10       11       11
U004E012     * 11       12       12
U004E013     * 12       13       13
U004E014     * 13       14       14
U004E015     * 14       15       15
U004E016     * 15 100 0000 000 0000,
U006E000+    U  6     $  0     $  0     DRUM SLOT TABLE--NEXT OPEN SLOT
U006E001     *  0        1 001    1
U006E002     *  1        2 002    2
U006E003     *  2        3 003    3
U006E004     *  3        4 020    4
U006E005     *  4        5 021    5
U006E006     *  5        6 022    6
U006E007     *  6        7 023    7
U006E008     *  7 100 0000 000 0000,
                $             ,5204
U007E000+    U  7     $  0     $  0     DRUM TABLE-INITIALS
U007E001     *  0 005,4130,270,0000
U007E002     *  1 005,4130,270,0000
U007E003     *  2 005,4130,270,0000
U007E004     *  3 005,4130,270,0000
U007E005     *  4 005,4130,270,0000
U007E006     *  5 005,4130,270,0000
U007E007     *  6 005,4130,270,0000
U007E008     *  7 005,4130,270,0000
U007E009     *  8 005,4130,270,0000
U007E010     *  9 005,4130,270,0000,
A---E000+    A  0 100 0000 000,0000     TERMINATION SIGNAL
A---E001     A  1 000 0000 001,6001     1
A---E002     A  2 000 0000 001,6002     2
A---E003     A  3 000 0000 001,5003     3
A---E004     A  4 000 0000 001,6004     4
A---E005     A  5 000 0000 001,5005     5
A---E006     A  6 000 0000 001,5006     6
A---E007     A  7 000 0000 001,4007     7
A---E008     A  8 000 0000 001,6010     8
A---E009     A  9 000 0000 001,5011     9
A---E010     A 10 000 0000 000,3161
A---E011     A 11 000 0000 000,3161
A---E012     A 12 000 0000 000,3161
A---E013     A 13 000 0000 000,3161
A---E014     A 14 000 0000 000,4016     SPACE
A---E015     A 15 000 0000 000,3161
A---E016     A 16 000 0000 000,6020     SEMICOLON
A---E017     A 17 001 V  1 002,5021     LCA
A---E018     A 18 002 V  2 002,5022     LCB
A---E019     A 19 003 V  3 002,4023     LCC
A---E020     A 20 004 V  4 002,5024     LCD
A---E021     A 21 005 V  5 002,4025     LCE
A---E022     A 22 006 V  6 002,4026     LCF
A---E023     A 23 007 V  7 002,3027     LCG
A---E024     A 24 010 V  8 002,5030     LCH
A---E025     A 25 011 V  9 002,4031     LCI
A---E026     A 26 000 0000 000,3161
A---E027     A 27 000 0000 000,3033     .
A---E028     A 28 000 0000 000,3161
A---E029     A 29 000 0000 000,3161
A---E030     A 30 000 0000 000,3036     EJECT+CR+EOM
A---E031     A 31 000 0000 000,2037     EJECT+CR
A---E032     A 32 000 = 33 240,6040     MULTIPLY DOT
A---E033     A 33 012 V 10 002,5041     LCJ
A---E034     A 34 013 V 11 002,5042     LCK
A---E035     A 35 014 V 12 002,4043     LCL
A---E036     A 36 015 V 13 002,5044     LCM
A---E037     A 37 016 V 14 002,4045     LCN
A---E038     A 38 017 V 15 002,4046     LCO
A---E039     A 39 020 V 16 002,3047     LCP
A---E040     A 40 021 V 17 002,5050     LCQ
A---E041     A 41 022 V 18 002,4051     LCR
A---E042     A 42 100 0000 000,4052     CR+EOM+TERMINAL SIGNAL IN SIGN
A---E043     A 43 002 0000 004,3053     =
A---E044     A 44 000 = 32 140,4054     -
A---E045     A 45 100 0000 000,3416     SPECIAL SPACE
A---E046     A 46 000 0000 000,3161
A---E047     A 47 000 0000 000,3161
A---E048     A 48 000 0000 001,5060     ZERO
A---E049     A 49 000 = 34 240,4061     /
A---E050     A 50 023 V 19 002,4062     LCS
A---E051     A 51 024 V 20 002,3063     LCT
A---E052     A 52 025 V 21 002,4064     LCU
A---E053     A 53 026 V 22 002,3065     LCV
A---E054     A 54 027 V 23 002,3066     LCW
A---E055     A 55 030 V 24 002,2067     LCX
A---E056     A 56 031 V 25 002,4070     LCY
A---E057     A 57 032 V 26 002,3071     LCZ
A---E058     A 58 000 0000 000,3161
A---E059     A 59 000 0000 000,2073     ,
A---E060     A 60 000 = 31 140,3074     +
A---E061     A 61 000 0000 000,2075     TAB
A---E062     A 62 000 0000 000,3161
A---E063     A 63 000 0000 000,3161
A---E064     A 64 000 0000 000,3161
A---E065     A 65 000 0000 000,5101     PRIME
A---E066     A 66 000 0000 000,5102     QUOTE MARKS
A---E067     A 67 000 0000 000,4016     STRIKE OUT CHARACTER = SPACE
A---E068     A 68 000 0000 000,5104     $
A---E069     A 69 003 0000 004,4105     LESS THAN OR =
A---E070     A 70 006 0000 004,4106     GREATER THAN OR =
A---E071     A 71 001 0000 004,3107     LESS THAN
A---E072     A 72 004 0000 004,5110     GREATER THAN
A---E073     A 73 000 A112 020,4111     (
A---E074     A 74 000 0000 000,3161
A---E075     A 75 000 0000 000,3161
A---E076     A 76 000 0000 000,3161
A---E077     A 77 000 0000 000,3161
A---E078     A 78 000 0000 000,3161
A---E079     A 79 000 0000 000,3161
A---E080     A 80 000 0000 000,5120     COLON
A---E081     A 81 041 V 27 002,4121     A
A---E082     A 82 042 V 28 002,4122     B
A---E083     A 83 043 V 29 002,3123     C
A---E084     A 84 044 V 30 002,4124     D
A---E085     A 85 045 V 31 002,3125     E
A---E086     A 86 046 V 32 002,3126     F
A---E087     A 87 047 V 33 002,2127     G
A---E088     A 88 050 V 34 002,4130     H
A---E089     A 89 051 V 35 002,3131     I
A---E090     A 90 000 0000 000,3161
A---E091     A 91 000 A123 010,2133     RIGHT BRACKET
A---E092     A 92 000 0000 000,3161
A---E093     A 93 000 0000 000,3161
A---E094     A 94 000 0000 000,3161
A---E095     A 95 000 0000 000,3161
A---E096     A 96 000 A 96 030,5140     ABS VAL BAR
A---E097     A 97 052 V 36 002,4141     J
A---E098     A 98 053 V 37 002,4142     K
A---E099     A 99 054 V 38 002,3143     L
A---E100     A100 055 V 39 002,4144     M
A---E101     A101 056 V 40 002,3145     N
A---E102     A102 057 V 41 002,3146     O
A---E103     A103 060 V 42 002,2147     P
A---E104     A104 061 V 43 002,4150     Q
A---E105     A105 062 V 44 002,3151     R
A---E106     A106 000 0000 002,3161
A---E107     A107 005 0000 004,2153     NOT =
A---E108     A108 000 0000 000,3154     UNDERSCORE
A---E109     A109 000 0000 000,2433     PERIOD WITH FLAG (CHAR 155 CAN'T GET IN)
A---E110     A110 000 0000 000,3161
A---E111     A111 000 0000 000,3161
A---E112     A112 000 A 73 010,4160     )
A---E113     A113 000 0000 000,3161     QUESTION MARK
A---E114     A114 063 V 45 002,3162     S
A---E115     A115 064 V 46 002,2163     T
A---E116     A116 065 V 47 002,3164     U
A---E117     A117 066 V 48 002,2165     V
A---E118     A118 067 V 49 002,2166     W
A---E119     A119 070 V 50 002,1167     X
A---E120     A120 071 V 51 002,3170     Y
A---E121     A121 072 V 52 002,2171     Z
A---E122     A122 000 0000 000,3161
A---E123     A123 000 A091 020,1173     LEFT BRACKET
A---E124     A124 000 = 35 440,2174     *
A---E125     A125 000 0000 000,1175     TAB
A---E126     A126 000 0000 000,3161
A---E127     A127 000 0000 000,3161
A---E128     A128 000 0000 000,0037     EJECT
A---E129     A129 000 0000 000,0056     CARRIAGE RETURN
A---E130     A130 000 0000 000,0155     PSEUDO PERIOD
A---E131     A131 000 0000 000,0055     PSEUDO SPACE
                $               502
F010E000+    F 10 010 $  0              ARG(X,Y)    X IN Q3,    Y IN Q7
F010E010          024 K  2 052 *  9
F010E020          120      050 * 80     SET FLAG=0
F010E030          020 Q  3 124 K 12
F010E040          050 * 82 020 Q  3     STORE SIGN OF X IN * 82
F010E050          125 K 12 050 * 81     STORE ABSOLUTE VALUE OF X IN * 81
F010E055          020 Q  6 001 E  6     MALFORMED IF NOT ENOUGH ARGUMENTS
F010E060          020 Q  7 124 K 12
F010E070          050 * 84 020 Q  7     STORE SIGN OF Y IN * 84
F010E080          125 K 12 050 * 83     STORE ABSOLUTE VALUE OF Y IN * 83
F010E090          020 $  0 010 = 17     POP Y
F010E100          020 Q  6 002 E  6     MALFORMED IF TOO MANY ARGUMENTS
F010E110          023 * 83 002 *  1     IF Y=0, SET RESULT TO ZERO, GO TO *  1
F010E120          023 * 81 001 *  3     IF X=0, SET RESULT TO 1/4(PI/2),
F010E130          020 * 91 010 *  1     THEN DETERMINE QUADRANT
F010E140     *  3 020 * 83 004 * 81
F010E145          075    1 010 $  1
F010E150          065 T  0 023 T  0     IF Y=X, SET RESULT TO 1/4(PI/4),
F010E160     *  7 005 *  5 020 * 92     THEN DETERMINE QUADRANT
F010E170     *  5 010 *  1 021 T  0
F010E180          002 *  6 050 * 80     SET FLAG NON-ZERO
F010E190          004 * 81 020 * 83     INTERCHANGE Y AND X
F010E200          050 * 81 060 * 83
F010E210     *  6 020 * 83 050 Q  3
F010E220          020 $  0 010 = 12
F010E230          020 * 81 050 Q  3
F010E240          020 $  0 010 = 34     COMPUTE Y/X
F010E245          023 Q  3 002 *  1     TEST FOR RATIO EQUAL TO ZERO
F010E265          020 $  0 010 = 11     UNPACK
F010E270          020 P  4 072   31
F010E275          050 P  4 024 * 97     IF SFX IS LESS THAN -11, TREAT AS
F010E280          006 *  8 120          ZERO RATIO
F010E285     *  8 010 *  1 021 P  4
F010E290          025 I  1 024 J 11     COMPUTE FIXED POINT RATION = Z
F010E295          056 * 10 020 P  6     DIVIDE BY 10*9, THEN 10*(-SFX-1)
F010E300          040 N  9 120          SET P6=0
F010E305     * 10 050 P  6 044 ----
F010E310          060 T  2 025 * 96     IF Z LESS THAN TAN(PI/8) USE K=1
F010E315          002 * 11 020 * 92     IF Z GREATER OR EQUAL USE K=3
F010E320          004 * 94 010 * 12
F010E325     * 11 020 * 93 004 * 95
F010E330     * 12 050 * 85 061 T  0     *85=K(PI/16)
F010E335          024 T  2 050 T  0     T1=Z-TAN (K.PI/17)
F010E340          032 T  2 076    1
F010E345          024 K 21 050 T  1     1/2(1+Z(TAN(K.PI/16))
F010E350          020 T  0 072    1
F010E355          044 T  1 060 T  0     T0=V, ARGUMENT FOR SERIES
F010E360          032 T  0 050 T  1     T1=V*2
F010E365          020 I  1 050 T  2     SET FLAG FOR CONSTANT + OR -
F010E370     * 13 020 * 98 050 T  3     SET INITIAL COEFFICIENT D=15
F010E375          021 T  2 050 T  2     (+ OR -1)/D
F010E380          040 T  3 020 P  6     SERIES SUM + 1/D = SUM
F010E385          064 P  6 004 T  1     (V*2).SERIES
F010E390          030 P  6 050 P  6
F010E395          020 T  3 025 I  4     D=D-2,IF NEGATIVE, TERMINATE SERIES
F010E397          005 * 24 024 I  2
F010E400     * 24 014 * 13 004 T  0     V.SERIES PLUS V
F010E405          030 P  6 024 T  0
F010E410          024 * 85 072    2     STORE 1/4 ANGLE
F010E415     *  1 050 T  0 023 * 80     IF FLAG IS NON-ZERO, SET ANGLE TO
F010E420          002 *  2 020 * 91     (1/4)PI/2 - ANGLE
F010E425          025 T  0 050 T  0
F010E430     *  2 023 * 82 006 *  4     TEST SIGN OF X, IF MINUS
F010E435          020 * 90 025 T  0     (1/4)PI - ANGLE
F010E440     *  4 050 T  0 023 * 84     TEST SIGN OF Y, IF MINUS
F010E445          006 * 14 021 T  0     -ANGLE
F010E450     * 14 050 T  0 070    0     CLEAR MQ AND P4
F010E455          060 P  4 021 T  0
F010E460          005 * 15 050 T  0     STORE MAGNITUDE OF ANGLE AND SIGN
F010E465     * 15 004 K 12 060 P  5
F010E470          120      004 T  0
F010E475          077    2 025 I  1     IF ANGLE IS LESS THAN ONE, MULTIPLY
F010E480          002 * 16 032 N  9     BY 10*9, SAVE BOTH PARTS OF RESULT
F010E483          050 P  6 060 T  2
F010E495     * 17 023 P  6 010 $  1     TEST FOR ZERO
F010E500          002 * 18 020 J 14     INITIALIZE COMPARE INSTRUCTION
F010E510     * 21 056 * 19 020 P  4     TO N8
F010E520          025 I  1 050 P  4     DECREASE SFX BY ONE
F010E530     * 19 020 P  6 025 ----
F010E540          002 * 20 020 * 19
F010E550          025 I  1 010 * 21
F010E560     * 20 020 J 11 025 I  1     COMPUTE POWER OF 10 FOR NORMALIZATION
F010E570          025 P  4 056 * 22
F010E575          056 * 25 020 P  4
F010E580          073   31 050 P  4
F010E583     * 25 004 T  2 030 ----
F010E586     * 22 004 P  6 036 ----
F010E590          060 P  6 025 N  9     TEST FOR ROUNDING UP TO 10*9
F010E595          001 * 23 020 N  8
F010E600          050 P  6 020 P  4
F010E605          024 K 14 050 P  4
F010E610     * 23 020 $  0 010 = 30     PACK
F010E620     *  9 010 ----              EXIT
F010E630     * 16 020 K 21 072    2     RESULT IS GREATER THAN ONE
F010E640          004 N  8 036 T  0     MULTIPLY BY 10*8 AND ROUND,
F010E650          077    2 010 * 18     MULTIPLY BY 4
F010E655     * 18 050 P  6 010 * 23
F010E660     * 80                       FLAG=0 IF Y LESS THAN X
F010E670     * 81                       ABSOLUTE VALUE OF X
F010E680     * 82                       SIGN OF X
F010E690     * 83                       ABSOLUTE VALUE OF Y
F010E700     * 84                       SIGN OF Y
F010E710     * 85                       K(PI/16)
F010E720     * 90 062,2077,325,0421     PI/4= .7853981633974
F010E730     * 91 031,1037,552,4210     PI/8= .3926990816987
F010E740     * 92 014,4417,665,2104     PI/16= .1963495408494
F010E750     * 93 045,5457,437,6314     3 PI/16= .5890486225481
F010E760     * 94 014,5657,536,0125     TAN(PI/16)= .1989123673
F010E770     * 95 052,6067,012,5337     TAN(3 PI/16)= .6681786379
F010E780     * 96 032,4047,463,1771     TAN (PI/8)= .4142135623
F010E790     * 97                11
F010E800     * 98                15,
F011E000+    F 11 004 * 91 010 $  0     MAX
F012E000     F 12 004 * 92 010 $  0     MIN
F012E010          024 K  2 052 *  9
F012E020          060 *  2 010 $  1
F012E030          020 Q  6 001 E  6     MALFORMED IF NOT MULTIPLE ARGUMENTS
F012E040     *  1 020 Q  3 050 H 21
F012E050          020 Q  7 050 H 22
F012E060          020 $  0 010 = 17
F012E070          020 $  0 010 = 70     COMPARE
F012E080     *  2 --- ---- --- ----
F012E090     *  3 020 H 22 050 Q  3
F012E100     *  4 020 Q  7 002 *  1
F012E110     *  9 010 ----
F012E120     * 91 071    4 001 *  4     FOR MAX
F012E130     * 92 071    6 001 *  4,    FOR MIN
G000E000+    G  0 010 *  6 010 *  0     SET (014=SHORT FORM)
G000E010     *  0 020 J 12 050 P  2     INITIALIZE
G000E020          020 $  0 010 =  2     ADVANCE TO NONSPACE
G000E030          020 $  0 010 * 80     LOCAL ROUTINE (GIVES 86 IN IND. SHORT
G000E040          020 P  1 001 * 10
G000E050          124 K 19 010 *  7
G000E060     *  6 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE
G000E070          020 $  0 010 * 80     LOCAL ROUTINE (COMMON TO G001)
G000E080          020 P  1 124 K 19
G000E090     *  7 025 K 19 001 E  6     ERROR IF NOT TERMINAL
G000E100     * 10 020 * 90 050 H 27     SET LETTER
G000E110          020 * 91 050 H 28     SET INDEX 1
G000E120          020 * 92 050 H 29     SET INDEX 2
G000E130          020 Q  3 050 H 30     SET VALUE
G000E140          020 $  0 010 = 13     POP Q3
G000E150          020 $  0 010 = 73     ASSIGN VALUE
G000E160          010 X  5              EXIT TO X5 ADVANCE (NO COMMA HERE)
G001E000+    G  1 010 $  0              DO (SAME CONTEXT AS 'SET')
G001E010          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE
G001E020          020 $  0 010 = 27     ACCUMULATE WORD
G001E030          025 W  7 050 * 90     SAVE DIFFERENCE IN *90
G001E040          023 * 90 002 *  1     JUMP IF 'PART'
G001E045          020 H 19 025 W  9
G001E050          050 T  0 023 T  0
G001E055          002 *  1 010 E  6     JUMP IF 'STEP' ELSE MALFORMED
G001E060     *  1 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE
G001E061          020 $  0 010 = 21     EVALUATE PART OR STEP NUMBER
G001E062          020 P  1 124 K 19
G001E063          025 K 19 002 * 25     JUMP IF TERMINAL
G001E064          020 $  0 010 = 79     VERIFY SPACE AND ADVANCE TO NONSPACE
G001E065          020 $  0 010 = 27     ACCUMULATE WORD
G001E066          025 W  2 050 T  0
G001E067          023 T  0 001 E  6     MALFORMED IF NOT 'FOR'
G001E068          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE
G001E069          020 P  1 124 K 19
G001E070          025 K 19 002 E  6     ERROR IF TERMINAL
G001E071     * 25 023 * 90 001 *  4     JUMP IF 'STEP'
G001E072          020 $  0 010 = 44     VALIDATE
G001E075          020 Q  3 050 P 20     SET PART
G001E080          020 $  0 010 = 50     FIND PART
G001E085          001 E 17 052 *  2     ERROR IF CAN'T
G001E090          024 K  2 052 *  3
G001E095     *  2 020 ---- 050 P 16
G001E100     *  3 020 ---- 050 P 21
G001E105          010 *  5
G001E120     *  4 020 $  0 010 = 45     VALIDATE
G001E125          020 Q  3 050 P 21     SET STEP
G001E130          020 K 21 050 Q 14     SET STEP FLAG IN Q14
G001E135          020 K  4 050 P 20     MARK P20 MINUS AS FLAG ALOS
G001E140          020 $  0 010 = 51     FIND STEP
G001E145          001 E 16 050 P 16     ERROR IF CAN'T
G001E150     *  5 020 $  0 010 = 13     POP Q3
G001E155          023 * 91 002 * 13     JUMP IF 'FOR'
G001E155          020 P  1 124 K 19
G001E160          025 K 19 001 * 13     JUMP IF NOT TERMINAL
G001E165     * 12 020 Q 12 001 *  8     JUMP IF NO SUSPENDED TASK
G001E170          050 Q  8 020 K  4     CANCEL SUSPENDED TASK
G001E171          050 Q 12 050 Q 13
G001E172     * 11 020 $  0 010 = 76
G001E173          020 Q  8 002 * 11
G001E175     *  8 020 $  0 010 = 18     PUSH Q9
G001E180          020 P 21 050 Q  9     SET Q9 TO FIRST STEP
G001E185          020 Q 14 053 Q  8     BRING ALONG ANY STRUCTURE
G001E190          120    0 050 Q 14     RELIEVE Q14 OF RESPONSIBILITY
G001E195          020 K  4 050 P 17     RESET FLAGS
G001E200          050 P 23 010 X  6     AND FETCH
G001E240     * 13 020 $  0 010 * 80     LOCAL ROUTINE COMMON TO 'SET'
G001E245          020 Q  3 050 H 30     SAVE FIRST VALUE FOR USE IN *40
G001E246          020 P  1 124 K 19
G001E247          025 K 19 001 *  9     JUMP IF NOT SINGLE VALUE
G001E248          020 $  0 010 = 13     POP Q3
G001E249          010 * 41              JUMP
G001E250     *  9 020 $  0 010 = 10
G001E260          056 * 14 071   21
G001E270          052 Q 14 052 * 93
G001E280     * 14 120    0 050 ----     CLEAR TOP OF 'PART' ELEMENT
G001E290          020 * 93 024 K  2
G001E300          052 * 15 020 P 20
G001E310     * 15 050 ---- 020 * 93     STORE PART NO. IN STRUCTURE
G001E320          052 * 16 010 $  1
G001E330          020 $  0 010 = 10
G001E340          056 * 17 071   21
G001E350     * 16 052 ---- 052 * 93
G001E360     * 17 120    0 050 ----     CLEAR TOP OF 'VARIABLE' ELEMENT
G001E370          020 * 93 024 K  2
G001E380          052 * 18 020 * 90
G001E390     * 18 050 ---- 010 $  1     STORE VARIABLE
G001E400          020 * 91 001 * 30     JUMP IF SCALAR
G001E410          020 $  0 010 = 10
G001E420          056 * 93 056 * 19
G001E430          024 K  1 056 * 20
G001E440     * 19 120    0 050 ----     CLEAR TOP OF INDEX ELEMENT
G001E450     * 20 020 * 91 050 ----     STORE INDEX
G001E460          020 * 93 052 * 21
G001E470     * 21 056 ---- 010 $  1     TIE INTO STRUCTURE
G001E480          020 * 92 001 * 30     JUMP IF NOT DOUBLY INDEXED
G001E490          020 $  0 010 = 10
G001E500          056 T  0 056 * 22
G001E505          024 K  1 056 * 23
G001E510     * 22 120    0 050 ----     CLEAR TOP OF INDEX ELEMENT
G001E515     * 23 020 * 92 050 ----     STORE INDEX
G001E520          020 * 93 056 * 24
G001E525     * 24 020 T  0 056 ----     TIE INTO STRUCTURE
G001E530     * 30 020 * 93 052 * 31     SET UP VALUE ELEMENT
G001E535          020 $  0 010 = 10
G001E540          056 * 93 056 * 32
G001E545          024 K  1 056 * 33
G001E550          025 K  1 071   21
G001E555     * 31 052 ---- 052 * 93
G001E560     * 32 120    0 050 ----     CLEAR TOP OF VALUE ELEMENT
G001E565     * 33 020 Q  3 050 ----     STORE VALUE
G001E570          020 $  0 010 = 13     POP Q3
G001E575     * 34 020 P  1 124 A 59
G001E580          025 A 59 001 * 40     JUMP IF NOT COMMA
G001E585          020 $  0 010 =  2     ADVANCE TO NONSPACE
G001E590          020 $  0 010 = 21     EVALUATE EXPRESSION
G001E595          010 * 30
G001E600     * 40 020 P  1 124 K 19
G001E605          025 K 19 001 * 50     JUMP IF NOT TERMINAL
G001E610     * 41 020 * 90 050 H 27
G001E615          020 * 91 050 H 28
G001E620          020 * 92 050 H 29
G001E640          020 $  0 010 = 73     ASSIGN FIRST VALUE
G001E645          010 * 12
G001E650     * 50 020 P  1 124 A 73
G001E652          025 A 73 002 * 51     JUMP IF LEFT PARENTHESIS
G001E654          020 P  1 124 A123
G001E656          025 A123 001 E  6     ERROR IF NEITHER LEFT PAREN OR BRACKE
G001E660     * 51 020 $  0 010 = 14     PUSH Q4-Q5
G001E665          020 P  1 050 Q  5     SAVE LEFT GROUPER AS OPERATOR
G001E667          020 $  0 010 =  2
G001E670          020 $  0 010 = 21     EVALUATE INCREMENT EXPRESSION
G001E675          020 $  0 010 = 77     MATCH GROUPERS
G001E680          020 $  0 010 =  2     ADVANCE TO NONSPACE
G001E685          020 $  0 010 = 21     EVALUATE TERMINAL EXPRESSION
G001E690          020 Q  3 050 H 22     MOVE TERMINAL EXPRESSION
G001E695          020 $  0 010 = 13     POP Q3
G001E700          020 Q  3 050 H 23     MOVE INCREMENT
G001E705          020 $  0 010 = 13     POP Q3
G001E710          020 * 93 024 K  1
G001E715          071   21 052 * 59
G001E720     * 59 020 ---- 050 H 21     COPY INITIAL VALUE
G001E730          020 $  0 010 = 70     COMPARE INITIAL AND TERMINAL VALUES
G001E735          050 T  0 124 K 25
G001E740          025 K 25 002 * 34     JUMP BACK IF LIMITS EQUAL
G001E745          023 J 23 002 E 28     ERROR IF INCREMENT EQUALS ZERO
G001E750          020 T  0 070    3     NOW TEST EXCLUSIVE-OR OF LESS SIGNAL
G001E755          024 H 23 124 K 12       WITH SIGN OF INCREMENT
G001E760          025 K 12 001 E 28     ERROR IF INCREMENT INCOMPATIBLE
G001E765     * 52 020 * 93 056 * 53     (SPACE OK TO ADD STRUCTURE)
G001E770     * 53 020 Q  0 056 ----
G001E775          056 * 54 024 K  1
G001E780     * 54 056 * 57 020 ----
G001E785          056 * 55 056 * 56
G001E790          056 * 93 024 K  1
G001E795     * 55 056 * 58 004 ----     SAVE LINK TO AVAILABLE SPACE
G001E800     * 56 120    0 050 ----     CLEAR TOP OF TERMINAL ELEMENT
G001E805     * 57 020 H 23 050 ----     SET INCREMENT
G001E810     * 58 020 H 22 050 ----     SET TERMINAL VALUE
G001E815          060 Q  0 010 * 34     SET Q0 AND LOOP
G001E820     * 80 024 K  2 052 * 89     LOCAL ROUTINE COMMON TO 'SET' AND 'DO
G001E830          020 P  1 050 * 90     STORE CHARACTER
G001E835          124 K 34 025 K 34
G001E840          001 E  6 020 K  4     ERROR IF NOT LETTER
G001E845          050 * 91 050 * 92     SET INDEX FLAGS
G001E850          020 $  0 010 =  1     ADVANCE ONE
G001E855          124 K 31 025 K 31
G001E860          001 * 82 010 $  1     JUMP IF NOT LEFT GROUPER
G001E865          020 $  0 010 = 26     EVALUATE GROUPED LIST
G001E870          020 Q  6 001 * 83     JUMP IF Q7 EMPTY
G001E872          020 Q  7 050 * 92     STORE 2ND INDEX
G001E874          020 $  0 010 = 17     POP Q7
G001E876          020 Q  6 002 E  6     MALFORMED IF EXTRA INDICES
G001E878     * 83 020 $  0 010 = 41     CHECK AND CONVERT FIRST INDEX
G001E880          020 Q  3 050 * 91     STORE CONVERTED INDEX LOCALLY
G001E885          020 * 92 001 * 81     JUMP IF SINGLY INDEX
G001E890          050 Q  3 010 $  1
G001E895          020 $  0 010 = 41     CHECK AND CONVERT SECOND INDEX
G001E900          020 Q  3 050 * 92     STORE CONVERTED INDEX LOCALLY
G001E910     * 81 020 $  0 010 = 13     POP Q3
G001E915     * 82 020 $  0 010 =  3     ELIMINATE SPACES
G001E920          124 A 43 025 A 43
G001E925          002 $  1 010 E  6     MALFORMED IF NOT '='
G001E930          020 $  0 010 =  2     ADVANCE TO NONSPACE
G001E935          020 $  0 010 = 21     EVALUATE EXPRESSION
G001E940     * 89 010 ----              EXIT *80 ROUTINE
G001E945     * 90                       LETTER
G001E950     * 91                       INDEX
G001E955     * 92                       INDEX
G001E960     * 93     ----     ----,
G002E000+    G  2 010 $  0              TO
G002E010          020 Q  8 001 E 10     ERROR IF DIRECT
G002E015          071    1 001 X  7     JUMP TO ASCEND IF 'DO STEP'
G002E020          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G002E030          020 $  0 010 = 27     PICK UP WORD
G002E040          025 W  9 050 T  0
G002E050          023 T  0 001 *  1     JUMP IF NOT 'STEP'
G002E060          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G002E070          020 $  0 010 = 21     EVALUATE EXPRESSION
G002E080          020 P  1 124 K 19     VERIFY TERMINAL
G002E081          025 K 19 001 E  6
G002E085          020 $  0 010 = 45     VALIDATE
G002E090          020 Q  3 050 P 21     SET CONTEXT
G002E100          020 $  0 010 = 13     POP Q3
G002E110          020 $  0 010 = 51     FIND STEP
G002E120          001 E 16 050 P 16     ERROR IF CAN'T ELSE SET P16
G002E125          020 P 21 014 *  4
G002E140     *  1 020 H 19 025 W  7
G002E150          050 T  0 023 T  0
G002E160          002 *  2 010 E  6     ERROR IF NOT PART
G002E170     *  2 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G002E180          020 $  0 010 = 21     EVALUATE EXPRESSION
G002E190          020 P  1 124 K 19     VERIFY TERMINAL
G002E191          025 K 19 001 E  6
G002E195          020 $  0 010 = 44     VALIDATE
G002E200          020 Q  3 050 P 20     SET CONTEXT
G002E210          020 $  0 010 = 13     POP Q3
G002E220          020 $  0 010 = 50     FIND PART
G002E230          001 E 17 052 *  3     ERROR IF CAN'T
G002E235          024 K  2 052 *  4
G002E240     *  3 020 ---- 050 P 16     ELSE SET P16 FOR FIRST STEP
G002E245     *  4 020 ---- 050 Q  9     SET Q9
G002E250          010 X  6         ,    JUMP TO FETCH
G003E000+    G  3 010 $  0              DONE
G003E010          020 $  0 010 = 38     SIMPLE-INDIRECT TEST
G003E020          010 X  7         ,    JUMP TO ASCEND
G007E000+    G  7 010 $  0              LINE
G007E010          020 $  0 010 =  3
G007E020          124 K 19 025 K 19
G007E030          001 E  6 020 A 42     SET UP CR+EOM
G007E040          050 S  1 010 X 14,    TRANSMIT AND TO X5 VIA X14.
G008E000+    G  8 010 $  0              PAGE
G008E010          020 $  0 010 =  3     ELIMINATE SPACES
G008E020          071   31 002 E  6     ERROR IF NOT TERMINAL
G008E030          020 $  0 010 = 22     CALL FOR NEW PAGE
G008E040          010 X  5         ,
G009E000+    G  9 010 E  5
G010E000+    G 10 010 E  6
G011E000+    G 11 010 $  0              FORM
G011E010          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE
G011E012          020 Q  9 002 E  9     ERROR IF INDIRECT
G011E015          020 P 10 002 E  6     ERROR IF CONDITION ATTACHED
G011E020          020 $  0 010 = 21     EVALUATE FORM NUMBER
G011E030          020 $  0 010 = 46     VALIDATE
G011E040          020 Q  3 050 P 22     SET CONTEXT
G011E050          020 $  0 010 = 13     POP Q3
G011E060          020 $  0 010 =  3     ELIMINATE SPACES
G011E070          124 A 80 025 A 80
G011E080          002 *  1 010 E  6     MALFORMED IF NOT COLON
G011E090     *  1 020 $  0 010 =  1     STEP ONE CHARACTER
G011E100          001 *  2 010 E  6     MALFORMED IF NOT TERMINAL MINUS
G011E110     *  2 020 I  1 050 P 13     SET SUBSTATE FOR FORM
G011E120          020 $  0 010 = 55     SWITCH TO USER
G011E130          020 $  0 010 = 53     KICK OUT PROGRAM
G011E140          010 X  1         ,    JUMP TO Q SERVICE
H---E000+    H  0                       LAST 16 BIT CLOCK READING
H---E001     H  1                       TIME OF DAY (IN CLOCK COUNTS)
H---E002     H  2                       DATE
H---E003     H  3                       DATE (CONTINUED)
H---E004     H  4 100 0000 000 0000     STN DUE FOR Q MSG
H---E005     H  5                 0     TIME TO LOG
H---E006     H  6                 0     TIME TO R0
H---E007     H  7     ----     ----     STN IN CORE
H---E008     H  8                       START TIME OF CURRENT SHOT
H---E009     H  9                       SCR CONTENTS
H---E010     H 10        0        0     NEXT AVAILABLE BUFFER
H---E011     H 11        0 000    0     NEXT AVAILABLE DRUM SLOT
H---E012     H 12     ----     ----     STN
H---E013     H 13     ----     ----     BUFFER
H---E014     H 14     ----     ----     DRUM
H---E015     H 15 100 0000 000 0000     += 'OF' DELAYED A/C READING
H---E016     H 16 100 0000 000 0000     += 'OF' DELAYED A/C PUNCHING
H---E017     H 17                       CURRENT DRUM ROUTINE CONTROL WORD
H---E018     H 18                       TEMP FOR =21, =27.
H---E019     H 19                       ACCUMULATED CHARACTERS RESULT OF =27
H---E020     H 20                       INTEGER FOR OUTPUT
H---E021     H 21                       SEARCH POINTER
H---E022     H 22                       SEARCH POINTER
H---E023     H 23                       SEARCH POINTER
H---E024     H 24                       SEARCH POINTER
H---E025     H 25                       SEARCH POINTER
H---E026     H 26                       SEARCH POINTER
H---E027     H 27                       LETTER
H---E028     H 28                       FIRST INDEX
H---E029     H 29                       SECOND INDEX
H---E030     H 30                       VALUE
H---E031     H 31 000,0100,012,1037     DRUM WORD FOR ERROR MSG INDEX
I---E000+    I  0                 0     SMALL INTEGERS
I---E001     I  1                 1
I---E002     I  2                 2
I---E003     I  3                 3
I---E004     I  4                 4
I---E005     I  5                 5
I---E006     I  6                 6
I---E007     I  7                 7
I---E008     I  8                 8
I---E009     I  9                 9
J---E000+    J  0                60     MINUTES PER HOUR
J---E001     J  1              1800     COUNTS PER MINUTE
J---E002     J  2                55     LINE NUMBER FOR EJECT
J---E003     J  3                15     PREFERRED PROCESSING PERIOD
J---E004     J  4                30     SHOT TIME FOR PROCESSING
J---E005     J  5               120     SHOT TIME FOR READING
J---E006     J  6               120     SHOT TIME FOR PUNCHING
J---E007     J  7               450     OVERDUE TIME FOR PROCESSING
J---E008     J  8               300     OVERDUE TIME FOR READING
J---E009     J  9               300     OVERDUE TIME FOR PUNCHING
J---E010     J 10     Q 11     Q 10
J---E011     J 11     N  0     N  0
J---E012     J 12     R  0     R  0
J---E013     J 13     A  0     A  0
J---E014     J 14     N  8     N  8
J---E015     J 15
J---E016     J 16                 4     CHOKE NUMBER
J---E017     J 17                 1     UNCHOKE NUMBER
J---E018     J 18+           9    8     CONSTANT
J---E019     J 19
J---E020     J 20                       COMMUNICATION CELL =77 TO DO AND G14
J---E021     J 21              ----     NUMBER OF INPUTS
J---E022     J 22              ----     NUMBER OF OUTPUTS
J---E023     J 23              ----     TIME WORKED
K---E000+    K  0 000,0000,000,0000     ZERO   (GENERAL CONSTANTS)
K---E001     K  1 000,0000,000,0001     ADDRESS MODIFIER
K---E002     K  2 000,0001,000,0000     ADDRESS MODIFIER
K---E003     K  3 000,0001,000,0001     ADDRESS MODIFIER
K---E004     K  4 100,0000,000,0000     SIGN BIT
K---E005     K  5 000,0000,000,7777     EXTRACTOR RIGHT ADDRESS
K---E006     K  6 000,7777,000,0000     EXTRACTOR LEFT ADDRESS
K---E007     K  7 000,7777,000,7777     EXTRACTOR BOTH ADDRESSES
K---E008     K  8 000,0000,177,0000     MASK INPUT MESSAGES
K---E009     K  9 000,0000,020,0000     COUNTER FOR EXTENDED CLOCK
K---E010     K 10 000,0000,033,0000     MASK FOR DRUM SECTION CODE
K---E011     K 11 077,6000,000,0000     EXTRACTOR SFX
K---E012     K 12 000,1000,000,0000     EXTRACTOR SIGN(CF)
K---E013     K 13 000,0777,777,7777     EXTRACTOR MAG(CF)
K---E014     K 14 000,2000,000,0000     UNIT FOR SFX (AND TEST IN =27)
K---E015     K 15 177,7777,777,7777     ALL ONES
K---E016     K 16 000,0017,000,0000     BUFFER MASK
K---E017     K 17 000,0000,000,0177     CHARACTER CODE MASK AND STN MASK.
K---E018     K 18 000,0017,000,0177     BUFFER + STN MASK
K---E019     K 19 000,0000,000,0400     BIT OF DISTINCTION
K---E020     K 20 000,0000,000,0017     EXTRACTOR NUMERIC CODE
K---E021     K 21 040,0000,000,0000     EN BIT
K---E022     K 22 020,0000,000,0000     DS BIT
K---E023     K 23 010,0000,000,0000     RO BIT
K---E024     K 24 004,0000,000,0000     TL BIT OR GREATER
K---E025     K 25 002,0000,000,0000     CL BIT OR EQUAL OR MATRIX
K---E026     K 26 001,0000,000,0000     SU BIT OR LESS OR VECTOR
K---E027     K 27 000,0000,400,0000     *      OR FUNCTION OR SUBSCRIPT
K---E028     K 28 000,0000,200,0000     MPY, /
K---E029     K 29 000,0000,100,0000     ON BIT OR +, -
K---E030     K 30 000,0000,040,0000     OF BIT OR ARITH OPERATOR
K---E031     K 31 000,0000,020,0000     TC BIT OR LEFT GROUPER
K---E032     K 32 000,0000,010,0000     RI BIT OR RIGHT GROUPER
K---E033     K 33 000,0000,004,0000     RC BIT OR RELATION
K---E034     K 34 000,0000,002,0000     EJ BIT OR LETTER
K---E035     K 35 000,0000,001,0000     TO BIT OR DIGIT
K---E036     K 36 003,0000,000,0000     CL+SU OR CONSTANT
K---E037     K 37 000,0000,700,0000     PRECEDENCE BITS
K---E038     K 38 102,0000,000,0000     MATRIX HEAD
K---E039     K 39 101,0000,000,0000     VECTOR HEAD
K---E040     K 40 000,0000,177,0000     MAJOR CYCLE MSGS
K---E041     K 41 000,0000,177,0000     MINOR CYCLE MSGS
K---E042     K 42 000,0000,177,0000     MASK FOR INDEX
K---E043     K 43        3        3
L---E000+    L  0        0        0     Q FOR ENABLE
L---E001     L  1 100 0000 000 0000     L ENABLED AND IDLE
L---E002     L  2 100 0000 000 0000     Q FOR CARD READER
L---E003     L  3 100 0000 000 0000     S WAITING FOR READER-READY SIGNAL
L---E004     L  4 100 0000 000 0000     S READING CARDS
L---E005     L  5 100 0000 000 0000     Q FOR DRUM ASSIGNMENTS
L---E006     L  6 100 0000 000 0000     L DRAINING BUFFERS BEFORE CL+SU
L---E007     L  7 100 0000 000 0000     Q FOR INPUT BUFFER AND CL+SU
L---E008     L  8 100 0000 000 0000     Q FOR CARD PUNCH
L---E009     L  9 100 0000 000 0000     S PUNCHING CARDS
L---E010     L 10 100 0000 000 0000     L GREEN (P13 HOLDS SUBSTATE)
L---E011     L 11 100 0000 000 0000     Q FOR BUFFER AND PREFERRED PROCESSING
L---E012     L 12 100 0000 000 0000     Q FOR PROCESSING
L---E013     L 13 100 0000 000 0000     S PROCESSING
L---E014     L 14 100 0000 000 0000     L CHOKED
L---E015     L 15 100 0000 000 0000
N---E000+    N  0+           1   39     POWERS OF TEN.
N---E001     N  1+          10   39
N---E002     N  2+         100   39
N---E003     N  3+        1000   39
N---E004     N  4+       10000   39
N---E005     N  5+      100000   39
N---E006     N  6+     1000000   39
N---E007     N  7+    10000000   39
N---E008     N  8+   100000000   39
N---E009     N  9+  1000000000   39
N---E010     N 10+ 10000000000   39
N---E011     N 11+100000000000   39
P---E000+    P  0                --     LINE NUMBER ON TYPEWRITER PAGE
P---E001     P  1 --- ---- --- ----     PRESENT CHARACTER WORD IN R
P---E002     P  2     ----     ----     ADDRESS OF PRESENT CHARACTER WORD IN
P---E003     P  3              ----     LOCN FOR PACKING OR UNPACKING
P---E004     P  4                       SFX   (EXTENDED TO SIGN POSITION)
P---E005     P  5                       SIGN   (EXTRACTED)
P---E006     P  6                       CF   (MAGNITUDE)
P---E007     P  7                       SFX   (EXTENDED TO SIGN POSITION)
P---E008     P  8                       SIGN   (EXTRACTED)
P---E009     P  9                       CF   (MAGNITUDE)
P---E010     P 10     ----     ----     LOCN OF SPACE AFTER 'IF', ELSE -1.
P---E011     P 11 --- ---- --- ----     PRESENT CHARACTER WORD IN S
P---E012     P 12     ----     ----     ADDRESS OF PRESENT CHARACTER WORD INS
P---E013     P 13                 2     SUB(L10)=0 INST, 1 FORM, 2 INIT, 3 DE
P---E014     P 14 010 ----              LINK FROM =25 (OUTPUT LINE)
P---E015     P 15 100 0000 000 0000     + = RI WHILE L11 OR L14
P---E016     P 16 100 0000 000 0000     + = LOCN OF CURRENT STEP IN RT ADDR
P---E017     P 17 100 0000 000 0000     + = STOPPED (USED BY G13 'GO')
P---E018     P 18                       WORKING STORE
P---E019     P 19                       WORKING STORE
P---E020     P 20                       CONTEXT CELL FOR PART ETC.
P---E021     P 21                       CONTEXT CELL FOR PART ETC.
P---E022     P 22                       CONTEXT CELL FOR PART ETC.
P---E023     P 23 100 0000 000 0000     + = PROBLEM IN X7
P---E024     P 24 000 ---- --- ----     DRUM ROUTINE CONTROL WORD FOR =78
P---E025     P 25 010 ----              LINK FROM =78 (TRANSMIT LINE)
P---E026     P 26 010 ----              LINK FOR TYPE ROUTINES
P---E027     P 27                       WORKING STORE
P---E028     P 28                       WORKING STORE
P---E029     P 29                       WORKING STORE
P---E030     P 30                       WORKING STORE
P---E031     P 31                       WORKING STORE
Q---E000+    Q  0              ----     AVAILABLE SPACE PDL LINK
Q---E001     Q  1              ----     SPARE TANK PDL LINK
Q---E002     Q  2 100 0000 000 0000     OPERAND PDL LINK
Q---E003     Q  3 100 0000 000 0000     OPERAND
Q---E004     Q  4 100 0000 000 0000     OPERATOR PDL LINK
Q---E005     Q  5 100 0000 000 0000     OPERATOR
Q---E006     Q  6 100 0000 000 0000     AUXILIARY PDL LINK
Q---E007     Q  7 100 0000 000 0000     AUXILIARY ITEM
Q---E008     Q  8 100 0000 000 0000     CONTROL PDL LINK
Q---E009     Q  9 100 0000 000 0000     CONTROL (STEP NUMBER)
Q---E010     Q 10 000 0000 000 0000     LIST OF STEPS (AND PARTS)
Q---E011     Q 11 000 0000 000 0000     LIST OF FORMS
Q---E012     Q 12 100 0000 000 0000     HIDEOUT FOR (Q8)
Q---E013     Q 13 100 0000 000 0000     HIDEOUT FOR (Q9)
Q---E014     Q 14 000 ---- 000 0000     TEMPORARY LIST STRUCTURE
Q---E015     Q 15 000 0000 000 ----     TEMPORARY LINEAR LIST
R---E000+    R  0 100 0000 000 0000     INPUT AND INTERPRETATION BLOCK
R---E001     R  1
R---E002     R  2
R---E003     R  3
R---E004     R  4
R---E005     R  5
R---E006     R  6
R---E007     R  7
R---E008     R  8
R---E009     R  9
R---E010     R 10
R---E011     R 11
R---E012     R 12
R---E013     R 13
R---E014     R 14
R---E015     R 15
R---E016     R 16
R---E017     R 17
R---E018     R 18
R---E019     R 19
R---E020     R 20
R---E021     R 21
R---E022     R 22
R---E023     R 23
R---E024     R 24
R---E025     R 25
R---E026     R 26
R---E027     R 27
R---E028     R 28
R---E029     R 29
R---E030     R 30
R---E031     R 31
R---E032     R 32
R---E033     R 33
R---E034     R 34
R---E035     R 35
R---E036     R 36
R---E037     R 37
R---E038     R 38
R---E039     R 39
R---E040     R 40
R---E041     R 41
R---E042     R 42
R---E043     R 43
R---E044     R 44
R---E045     R 45
R---E046     R 46
R---E047     R 47
R---E048     R 48
R---E049     R 49
R---E050     R 50
R---E051     R 51
R---E052     R 52
R---E053     R 53
R---E0054    R 54
R---E055     R 55
R---E056     R 56
R---E057     R 57
R---E058     R 58
R---E059     R 59
R---E060     R 60
R---E061     R 61
R---E062     R 62
R---E063     R 63
R---E064     R 64
R---E065     R 65
R---E066     R 66
R---E067     R 67
R---E068     R 68
R---E069     R 69
R---E070     R 70
R---E071     R 71
R---E072     R 72
R---E073     R 73
R---E074     R 74
R---E075     R 75
R---E076     R 76
R---E077     R 77
R---E078     R 78
R---E079     R 79
R---E080     R 80
R---E081     R 81
S---E000+    S  0     S  0     S  0     OUTPUT BLOCK
S---E001     S  1
S---E002     S  2
S---E003     S  3
S---E004     S  4
S---E005     S  5
S---E006     S  6
S---E007     S  7
S---E008     S  8
S---E009     S  9
S---E010     S 10
S---E011     S 11
S---E012     S 12
S---E013     S 13
S---E014     S 14
S---E015     S 15
S---E016     S 16
S---E017     S 17
S---E018     S 18
S---E019     S 19
S---E020     S 20
S---E021     S 21
S---E022     S 22
S---E023     S 23
S---E024     S 24
S---E025     S 25
S---E026     S 26
S---E027     S 27
S---E028     S 28
S---E029     S 29
S---E030     S 30
S---E031     S 31
S---E032     S 32
S---E033     S 33
S---E034     S 34
S---E035     S 35
S---E036     S 36
S---E037     S 37
S---E038     S 38
S---E039     S 39
S---E040     S 40
S---E041     S 41
S---E042     S 42
S---E043     S 43
S---E044     S 44
S---E045     S 45
S---E046     S 46
S---E047     S 47
S---E048     S 48
S---E049     S 49
S---E050     S 50
S---E051     S 51
S---E052     S 52
S---E053     S 53
S---E054     S 54
S---E055     S 55
S---E056     S 56
S---E057     S 57
S---E058     S 58
S---E059     S 59
S---E060     S 60
S---E061     S 61
S---E062     S 62
S---E063     S 63
S---E064     S 64
S---E065     S 65
S---E066     S 66
S---E067     S 67
S---E068     S 68
S---E069     S 69
S---E070     S 70
S---E071     S 71
S---E072     S 72
S---E073     S 73 100 0000 000,4052     (NEEDED FOR D7)
S---E074     S 74 100 0000 000,4052     (NEEDED FOR D7)
T---E000+    T  0                       TEMPORARY STORAGE REGION
T---E001     T  1                         (NOT GUARANTEED OVER SUBROUTINES)
T---E002     T  2
T---E003     T  3
T---E004     T  4
T---E005     T  5
T---E006     T  6
T---E007     T  7
V---E000+    V  0     V  0     V  0     VARIABLE TABLE (ORIGIN)
V---E001     V  1 100 0000 000 0000     LCA
V---E002     V  2 100 0000 000 0000     LCB
V---E003     V  3 100 0000 000 0000     LCC
V---E004     V  4 100 0000 000 0000     LCD
V---E005     V  5 100 0000 000 0000     LCE
V---E006     V  6 100 0000 000 0000     LCF
V---E007     V  7 100 0000 000 0000     LCG
V---E008     V  8 100 0000 000 0000     LCH
V---E009     V  9 100 0000 000 0000     LCI
V---E010     V 10 100 0000 000 0000     LCJ
V---E011     V 11 100 0000 000 0000     LCK
V---E012     V 12 100 0000 000 0000     LCL
V---E013     V 13 100 0000 000 0000     LCM
V---E014     V 14 100 0000 000 0000     LCN
V---E015     V 15 100 0000 000 0000     LCO
V---E016     V 16 100 0000 000 0000     LCP
V---E017     V 17 100 0000 000 0000     LCQ
V---E018     V 18 100 0000 000 0000     LCR
V---E019     V 19 100 0000 000 0000     LCS
V---E020     V 20 100 0000 000 0000     LCT
V---E021     V 21 100 0000 000 0000     LCU
V---E022     V 22 100 0000 000 0000     LCV
V---E023     V 23 100 0000 000 0000     LCW
V---E024     V 24 100 0000 000 0000     LCX
V---E025     V 25 100 0000 000 0000     LCY
V---E026     V 26 100 0000 000 0000     LCZ
V---E027     V 27 100 0000 000 0000     A
V---E028     V 28 100 0000 000 0000     B
V---E029     V 29 100 0000 000 0000     C
V---E030     V 30 100 0000 000 0000     D
V---E031     V 31 100 0000 000 0000     E
V---E032     V 32 100 0000 000 0000     F
V---E033     V 33 100 0000 000 0000     G
V---E034     V 34 100 0000 000 0000     H
V---E035     V 35 100 0000 000 0000     I
V---E036     V 36 100 0000 000 0000     J
V---E037     V 37 100 0000 000 0000     K
V---E038     V 38 100 0000 000 0000     L
V---E039     V 39 100 0000 000 0000     M
V---E040     V 40 100 0000 000 0000     N
V---E041     V 41 100 0000 000 0000     O
V---E042     V 42 100 0000 000 0000     P
V---E043     V 43 100 0000 000 0000     Q
V---E044     V 44 100 0000 000 0000     R
V---E045     V 45 100 0000 000 0000     S
V---E046     V 46 100 0000 000 0000     T
V---E047     V 47 100 0000 000 0000     U
V---E048     V 48 100 0000 000 0000     V
V---E049     V 49 100 0000 000 0000     W
V---E050     V 50 100 0000 000 0000     X
V---E051     V 51 100 0000 000 0000     Y
V---E052     V 52 100 0000 000 0000     Z
W---E000+    W  0 000,0000,001,1414     ALL
W---E001     W  1 000,0002,411,1505     TIME
W---E002     W  2 000,0000,006,1722     FOR
W---E003     W  3 000,0000,617,2215     FORM
W---E004     W  4 000,0061,722,1523     FORMS
W---E005     W  5 000,0000,000,1106     IF
W---E006     W  6 000,0000,000,1116     IN
W---E007     W  7 000,0002,001,2224     PART
W---E008     W  8 000,0200,122,2423     PARTS
W---E009     W  9 000,0002,324,0520     STEP
W---E010     W 10 000,0232,405,2023     STEPS
W---E011     W 11 000,0252,305,2223     USERS
W---E012     W 12 002,6011,425,0523     VALUES
W---E013     W 13 000,0002,311,3205     SIZE
W---E014     W 14 000,0000,000,1722     OR
W---E015     W 15 000,0000,001,1604     AND
Z---E000+    Z  0 177,7777,777,7777     USER'S INITIALS (8-BIT CHAR STRING)
X001E000+    X  1 131 $  0              QUEUE SERVICE (HALT HERE IF H1)
X001E010          020 $  0 010 =  0     READ CLOCK
X001E020          013 *  1 020 L  0     JUMP IF T3 FOR WINDUP
X001E030          002 X 11 010 *  2     JUMP IF L0 FOR ENABLE, ELSE SKIP
X001E040     *  1 025 H  6 002 X  0     JUMP IF TIME TO R0 IN WINDUP
X001E050          020 L  1 002 X 11     JUMP IF L1 TO DISABLE STN
X001E060     *  2 020 L  5 001 *  3     JUMP IF NO L5 FOR Q DRUM SLOT
X001E070          020 H 11 002 X 11     JUMP IF DRUM SLOT AVAILABLE
X001E080     *  3 020 H  4 001 *  4     JUMP IF NO Q MESSAGE DUE
X001E090          020 H 10 002 X 11     JUMP IF BUFFER AVAILABLE FOR MSG
X001E100     *  4 020 H  1 025 H  5
X001E110          002 X  0 010 X  2,    JUMP IF TIME TO LOG, ELSE X2
X003E000+    X  3 010 $  0              TASK SELECTION
X003E010          011 *  1 010 *  2     TO *1 IF 'READER READER', ELSE TO *2
X003E020     *  1 020 L  3 001 *  2     JUMP IF NO STN WAITING FOR READER REA
X003E030          020 L  9 001 X  8     JUMP IF NO STN PUNCHING, INITIATE REA
X003E050     *  2 020 L  4 001 *  3     TO *3 IF NO STN READING
X003E060          024 U  4 052 $  1
X003E070          020 ---- 024 J  8
X003E080          025 H  1 005 X  8     TO X8 IF READING IS OVERDUE.
X003E090          010 *  5
X003E100     *  3 020 L  2 002 * 20     JUMP IF STN WAITING TO READ
X003E110          020 L  9 001 *  4     JUMP IF NO STN PUNCHING
X003E120          024 U  4 052 $  1
X003E130          020 ---- 024 J  9
X003E140          025 H  1 005 X  9     TO X9 IF PUNCHING IS OVERDUE
X003E150          010 *  5
X003E160     *  4 020 L  8 001 *  5     JUMP IF NO STN WAITING TO PUNCH
X003E170          020 L  4 001 X  9     JUMP IF NO STN READING, INITIATE PUNC
X003E180     *  5 020 L 12 001 *  6     TO *6 IF NO STN WTG FOR NORMAL PROCES
X003E190          024 U  4 052 $  1
X003E200          020 ---- 024 J  7
X003E210          025 H  1 001 * 40     TO *40 IF STN OVERDUE FOR PROCESSING
X003E220     *  6 020 L 11 001 *  7     TO *7 IF NO STN WTG FOR BUFFER
X003E230          020 H 10 002 * 50     TO *50 IF BUFFER AVAILABLE
X003E240     *  7 020 L 12 002 * 40     TO *40 IF STN WTG FOR PROCESSING
X003E250          020 L  4 006 X  8     JUMP IF STN READING
X003E260          020 L  9 006 X  9     JUMP IF STN PUNCHING
X003E270          010 X  1              NOTHING TO DO,GO BACK TO Q SERVICE
X003E280     * 20 105    0 011 $  0     LOOP TILL T1 TURNED OFF
X003E500     * 40 020 L 12 050 H 12     SET STN CONTEXT
X003E510          020 $  0 010 = 47     CHANGE STATE TO L13
X003E520              L 13     L 13
X003E530          020 $  0 010 = 54     BRING IN PROGRAM
X003E540          010 X  4              FIRE
X003E560     * 50 020 L 11 050 H 12     SET STN CONTEXT
X003E570          020 $  0 010 = 47     CHANGE STATE TO L13
X003E580              L 13     L 13
X003E590          020 $  0 010 = 54     BRING IN PROGRAM
X003E600          014 = 25         ,    REENTER =25
X004E000+    X  4 010 $  0              FIRE
X004E010          020 P 10 001 *  2     JUMP IF UNCONDITIONAL
X004E020          020 P  1 050 P 11     SAVE SETUP
X004E030          020 P  2 050 P 12
X004E040          020 A 14 050 P  1
X004E050          020 P 10 050 P  2
X004E060          020 $  0 010 = 23     EVALUATE CONDITION
X004E070          002 *  1 010 X  5     JUMP TO X5 ADVANCE IF DOESN'T HOLD
X004E100     *  1 020 P 11 050 P  1     RESTORE SETUP
X004E110          020 P 12 050 P  2
X004E120     *  2 020 $  0 010 = 27     INTERPRET VERB
X004E130          020 * 50 052 * 11
X004E140     * 11 020 ---- 005 G  0     JUMP TO TRY SHORT-SET IF NOT VALID VE
X004E150          025 H 19 001 * 12
X004E160          025 K  1 001 * 13
X004E170     * 12 020 * 11 024 K  2
X004E180          052 * 11 010 * 11
X004E190     * 13 020 * 11 025 * 50
X004E200          024 * 51 052 *  9
X004E210     *  9 010 ----              GO TO GXXX
X004E220     * 50     * 60
X004E230     * 51     G  0
X004E240     * 60 000,0000,063,0524     SET
X004E250          000,0000,000,4417     DO
X004E260          000,0000,000,6417     TO
X004E270          000,0004,417,1605     DONE
X004E280          004,3011,603,0514     CANCEL
X004E290          004,4051,405,2405     DELETE
X004E300          000,0006,431,2005     TYPE
X004E310          000,0005,411,1605     LINE
X004E320          000,0006,001,0705     PAGE
X004E330          000,0006,205,0104     READ
X004E340          000,0602,516,0310     PUNCH
X004E350          000,0004,617,2215     FORM
X004E360          000,0006,324,1720     STOP
X004E370          000,0000,000,4717     GO
X004E380          004,4051,501,1604     DEMAND
X004E390          100,0000,000,0000,
X005E000+    X  5 010 $  0              ADVANCE
X005E010          020 Q  8 001 *  5     JUMP IF TASK FINISHED
X005E020          071    1 001 X  7     JUMP IF 'STEP'
X005E030          020 P 16 002 *  1     JUMP IF P16 STILL GOOD
X005E035          020 Q  9 050 P 21     SET STEP
X005E040          020 $  0 010 = 51     FIND CURRENT STEP
X005E050          002 *  1 010 $  1     TO *1 IF FOUND
X005E060          020 H 23 001 X  7     TO X7 (ASCEND) IF DONE.
X005E070          020 H 26 001 X  7     TO X7 (ASCEND) IF DONE.
X005E080          020 H 25 010 *  1     GIMMICK TO GET NEXT
X005E090     *  1 052 *  2 010 $  1
X005E095          024 K  2 052 *  6
X005E096     *  6 020 ---- 050 Q  9     SET Q9
X005E100     *  2 020 ---- 001 *  4
X005E110     *  3 050 P 16 010 X  6     SET P16 FOR NEXT STEP AND GO TO X6(FE
X005E120     *  4 050 P 16 101 X  7     SET P16 AND GO TO X7 (ASCEND)
X005E130     *  5 020 $  0 010 = 55     SWITCH TO USER--TASK COMPLETE
X005E140          020 $  0 010 = 53     KICK OUT PROGRAM
X005E150          010 X  1         ,    GO BACK TO Q SERVICE.
X006E000+    X  6 010 $  0              FETCH
X006E010          020 P 15 001 *  1     JUMP IF NO POSTPONED 'RI'
X006E020          020 H 12 024 K 32     FAKE AN 'RI'
X006E030          050 H  9 010 X 10       IN H9 AND JUMP
X006E035     *  1 020 P 16 056 P  3
X006E040          020 $  0 010 =  7     UNPACK
X006E050          020 $  0 010 =  1     ADVANCE TO VERB
X006E060     *  2 020 $  0 010 =  0     READ CLOCK
X006E070          025 H  8 025 J  4
X006E080          002 *  6 024 J  4     JUMP IF SHOT TIME IS UP
X006E090          025 J  3 002 *  4     PREFERRED PERIOD IS UP
X006E100          120    0 145 K 35
X006E110          001 X  4 050 H  9     JUMP IF NO 'TO'
X006E120     *  3 020 $  0 010 = 48     TREAT 'TO' BY SUBROUTINE
X006E140          010 *  2              LOOP BACK
X006E150     *  4 120    0 145 K 41
X006E160          001 *  5 050 H  9     JUMP IF NO MINOR CYCLE MSG
X006E170          124 K 35 025 K 35
X006E180          002 *  3 010 *  6     JUMP IF 'TO' ELSE JUMP TO CUTOFF
X006E190     *  5 020 L 11 001 X  4     JUMP IF NO L11
X006E200          020 H 10 001 X  4     JUMP IF NO BUFFER
X006E210     *  6 020 $  0 010 = 47     CUTOFF
X006E220              L 12     L 12
X006E230          020 $  0 010 = 53     KICK OUT
X006E240          010 X  1         ,    JUMP TO Q SERVICE
X007E000+    X  7 010 $  0 010 * 30     ASCEND (OR ITERATE) (O14=OVERFLOW)
X007E010          020 K  4 050 P 16     RESET P16
X007E020          020 Q  8 052 *  1
X007E030     *  1 020 ---- 006 *  3     JUMP IF POSSIBLY MORE ITERATIONS
X007E040     *  2 020 $  0 010 = 76     ASCEND REALLY
X007E050          020 K  4 050 P 23     RESET P23
X007E060          020 Q  8 002 X  5     EXIT TO X5 IF MORE TO DO ON TASK
X007E070          020 $  0 010 = 55     SWITCH TO USER
X007E080          020 $  0 010 = 53     KICK OUT PROGRAM
X007E090     *  3 010 X  1 052 *  5     EXIT TO X1 FOR QUEUE SERVICE
X007E100          120    0 050 P 23     SET P23
X007E110          020 Q  0 056 *  4     CHECK FOR TWO SPACES
X007E120     *  4 001 E  0 020 ----
X007E130          002 *  5 010 E  0
X007E140     *  5 020 ---- 052 *  6
X007E150     *  6 023 ---- 002 *  2     JUMP IF NO MORE ITERATIONS
X007E160     * 10 020 *  1 024 K  2     SET UP Q9 FOR NEXT ITERATION
X007E170          052 * 11 010 $  1
X007E180     * 11 020 ---- 001 * 14     JUMP IF MINUS INDICATING 'STEP'
X007E190          050 P 20 010 $  1
X007E200          020 $  0 010 = 50     FIND PART
X007E210          001 E 26 052 * 13     ERROR IF CAN'T
X007E220          024 K  2 052 * 12
X007E230     * 12 020 ---- 050 Q  9
X007E240     * 13 020 ---- 014 * 15
X007E250     * 14 020 Q  9 050 P 21
X007E260          020 $  0 010 = 51     FIND STEP
X007E270     * 15 001 E 27 050 P 16     ERROR IF CAN'T
X007E280     * 20 020 *  6 052 * 21     GET NEXT VALUE FOR ITERATION
X007E290     * 21 020 ---- 056 * 22
X007E300     * 22 050 P 18 020 ----
X007E310          001 * 40 056 * 31     JUMP IF NO INCREMENT
X007E320          024 K  1 056 * 25
X007E330          020 *  6 024 K  2
X007E340          052 * 23 020 * 22
X007E350          024 K  1 056 * 24
X007E360          020 $  0 010 = 12     PUSH Q3
X007E370     * 23 020 ---- 050 Q  3
X007E380          020 $  0 010 = 12     PUSH Q3
X007E390     * 25 070    0 020 ----     PICK UP LIMIT
X007E400     * 24 050 H 22 020 ----     PICK UP INCREMENT
X007E410          050 Q  3 050 H 23
X007E420          020 $  0 010 = 13     COMPUTE NEXT VALUE
X007E430          050 H 21 010 $  1
X007E440          020 $  0 010 = 13     POP Q3
X007E450          020 $  0 010 = 70     COMPARE NEW VALUE WITH LIMIT VALUE
X007E460          071    5 001 * 30     JUMP IF NEW VALUE EQUALS LIMIT VALUE
X007E470          070    8 024 H 23
X007E480          071    9 002 * 30     JUMP IF NEW VALUE EXCEEDS LIMIT VALUE
X007E490          020 H 21 010 * 33
X007E500     * 30 020 * 31 056 * 32     DELETE INCREMENT-LIMIT PAIR
X007E510          020 *  6 052 * 32
X007E520     * 31 004 Q  0 020 ----
X007E530     * 32 056 ---- 060 ----
X007E540          020 * 22 124 K  5
X007E550          050 Q  0 020 H 22     USE LIMIT NEXT IF EQUALED OR EXCEEDED
X007E560     * 33 050 ---- 010 * 50     UPDATE CURRENT VALUE AND JUMP TO ASSI
X007E610     * 40 020 *  5 052 * 43     DELETE USED VALUE
X007E620          020 *  6 052 * 42
X007E630          124 K  6 070   21
X007E640     * 41 004 Q  0 050 Q  0
X007E650     * 42 060 ---- 020 P 18
X007E660     * 43 052 ---- 010 * 50
X007E670     * 50 020 *  5 052 * 51     ASSIGN NEW VALUE
X007E680          024 K  2 052 * 52
X007E690     * 51 020 ---- 056 * 53
X007E700          024 K  3 056 * 54
X007E710     * 52 004 ---- 052 * 58
X007E720     * 53 060 H 27 020 ----
X007E730          056 * 55 024 K  1
X007E740          056 * 56 006 * 54     (USING TRICKS HERE -- BEWARE)
X007E750     * 54 010 * 55 020 ----
X007E760     * 55 050 H 28 020 ----
X007E770     * 56 001 * 57 020 ----
X007E780     * 57 050 H 29 010 $  1
X007E790     * 58 020 ---- 050 H 30
X007E800          020 $  0 010 = 73
X007E810          020 K  4 050 P 23     RESET P23
X007E820          010 X  6         ,    EXIT TO X6 FETCH
X012E000+    X 12 010 *  1 010 *  2     TRANSMIT (IF 010) AND SWITCH
X012E010     *  1 020 $  0 010 = 25     TRANSMIT
X012E020     *  2 020 $  0 010 = 55     SWITCH
X012E030          020 $  0 010 = 53     KICK OUT
X012E040          010 X  1         ,    EXIT TO Q SERVICE
X014E000+    X 14 010 $  0              SPECIAL TRANSMIT THEN GO TO X5
X014E010          020 $  0 010 = 25
X014E020          010 X  5         ,
X015E000+    X 15 010 $  0              READ ROUTINE FROM DRUM AND EXECUTE
X015E010          050 T  0 020 H 17     SAVE ACCUMULATOR
X015E020          065 T  1 023 T  1
X015E030          002 *  1 060 H 17     JUMP IF ROUTINE ALREADY IN CORE
X015E040          110 M  0 010 $  1     ELSE READ IT IN
X015E050     *  1 020 T  0 010 M  0,    RESET ACCUMULATOR AND JUMP
=000E000+    =  0 010 $  0              READ CLOCK
=000E010          024 K  2 052 *  9
=000E020          107    0 004 H  0
=000E030          050 H  0 065 T  0
=000E040          002 *  1 024 K 31     ADD 2*16 IF CLOCK TURNED OVER
=000E050     *  1 024 H  1 050 H  1
=000E060     *  9 010 ----         ,    EXITS WITH TIME IN ACC AND H1
=001E000+    =  1 010 $  0              STEP ONE CHARACTER
=001E010          024 K  2 052 *  9
=001E020          020 P  2 024 K  3
=001E030          052 *  1 054 P  2
=001E040     *  1 020 ---- 050 P  1     LEAVES NEW CHARACTER IN ACC
=001E050     *  9 010 ----         ,
=002E000+    =  2 024 K  2 010 $  0     ADVANCE TO NONSPACE
=002E010          052 *  9 010 *  1
=003E000     =  3 010 $  0              ELIMINATE SPACES
=003E010          024 K  2 052 *  9
=003E020          020 P  1 010 *  3
=003E030     *  1 020 P  2 024 K  3
=003E040          052 *  2 054 P  2
=003E050     *  2 020 ---- 050 P  1
=003E060     *  3 124 A 14 025 A 14
=003E070          002 *  1 020 P  1
=003E080     *  9 010 ----         ,    LEAVES NONSPACE IN ACC
=004E000+    =  4 130 =  4 134 =  4
=005E000+    =  5 010 $  0              CONVERTER
=005E010          024 K  2 052 *  9
=005E020     *  1 020 A 42 050 R 73     FILL WITH CR+EOM+TERMINAL FROM RIGHT
=005E030          020 *  1 014 *  3
=005E040     *  2 020 A 42 050 ----
=005E050     *  3 020 *  2 025 K  1
=005E060          056 *  2 056 *  4
=005E070     *  4 020 *  5 004 ----
=005E080          065 T  0 023 T  0
=005E090          002 *  2 020 *  6
=005E100          065 T  0 023 T  0
=005E105          002 *  2 010 * 10
=005E110     *  5             ,0016     SPACE
=005E115     *  6             ,0103     STRIKE OUT
=005E120     * 10 020 J 12 050 P  2
=005E130     * 11 020 K  4 050 P 10     CLEAR 'IF'
=005E140     * 12 020 $  0 010 * 20
=005E150     * 13 020 P  1 124 A 14     SPACE
=005E160          025 A 14 001 * 14
=005E170     * 15 020 $  0 010 * 20
=005E180          020 P  1 124 A 25     I
=005E190          025 A 25 001 * 13
=005E200          020 $  0 010 * 20
=005E210          020 P  1 124 A 22     F
=005E220          025 A 22 001 * 13
=005E230          020 $  0 010 * 20
=005E240          020 P  1 124 A 14     SPACE
=005E250          025 A 14 001 * 14
=005E260          020 P  2 050 P 10     RECORD 'IF' BY LOCN OF FOLLOWING SPAC
=005E270          010 * 15
=005E280     * 14 020 P  1 124 A 66
=005E290          025 A 66 001 * 12
=005E300          010 * 11              CLEAR 'IF' IF QUOTE
=005E310     * 20 024 K  2 052 * 29
=005E320          020 P  2 024 K  3
=005E330          050 P  2 056 * 21
=005E340     * 21 056 * 23 020 ----
=005E350          024 J 13 056 * 22
=005E360     * 22 001 * 24 020 ----
=005E370     * 23 050 P  1 050 ----
=005E380     * 29 010 ----              EXIT FROM *20
=005E390     * 24 020 P  2 025 K  3
=005E400          050 P  2 052 * 25
=005E410     * 25 020 ---- 050 P  1
=005E420     *  9 010 ----         ,    EXIT WITH LAST CHAR IN CONTEXT AND AC
=006E000+    =  6 010 $  0              PACKER
=006E010          024 K  2 052 *  9     LEAVES LINK TO STRING IN P3 AND ACC.
=006E030          020 R  1 001 *  8     TO *8 IF VACUOUS
=006E040          020 Q  0 056 Q 15     SET
=006E050          020 J 12 050 P  2
=006E060          020 $  0 010 =  1
=006E070     *  1 020 $  0 010 = 10
=006E080          056 *  3 024 K  1
=006E090          056 *  2 070    0
=006E100          020 $  0 010 * 20
=006E110          020 $  0 010 * 20
=006E120          020 $  0 010 * 20
=006E130          020 $  0 010 * 20
=006E140          060 T  0 071   12
=006E150          050 T  1 070    0
=006E160          020 $  0 010 * 20
=006E170          020 $  0 010 * 20
=006E180          020 $  0 010 * 20
=006E190          020 $  0 010 * 20
=006E200          020 $  0 010 * 20
=006E210          060 T  0 010 $  1
=006E220     *  2 071    5 050 ----
=006E230          020 P  1 001 *  3
=006E240          020 Q  0 056 T  1
=006E250     *  3 020 T  1 050 ----
=006E260          020 P  1 002 *  1
=006E270     *  8 020 Q 15 050 P  3     POSITION OUTPUT IN P3
=006E280     *  9 010 ----
=006E290     * 20 024 K  2 052 * 29
=006E300          120    0 075    7
=006E310          020 P  1 124 K 17
=006E320          064 T  0 004 T  0
=006E330          020 P  2 024 K  3
=006E340          052 * 21 054 P  2
=006E350     * 21 020 ---- 050 P  1
=006E360     * 29 010 ----         ,
=007E000+    =  7 024 K  4 010 $  0     UNPACK TO R(IF 010), TO S(IF 014)
=007E010          024 K  2 052 *  9
=007E020          006 *  5 020 J 12
=007E025     *  5 010 *  6 020 S  0
=007E030     *  6 052 * 23 020 K  4
=007E035          050 P  2 050 P 10
=007E040          020 P  3 050 T  0     PICK UP SOURCE FROM P3.
=007E050     *  1 023 T  0 001 *  2     TO *2 IF MORE
=007E060          020 A 42 010 * 21     SUPPLY CR+EOM AND EXIT VIA *21.
=007E070     *  2 020 T  0 010 $  1
=007E080          056 *  3 024 K  1
=007E090     *  3 056 *  4 004 ----
=007E100          020 $  1 010 * 20
=007E110          020 $  1 010 * 20
=007E120          020 $  1 010 * 20
=007E130          020 $  1 010 * 20
=007E140          075   12 010 $  1
=007E150     *  4 056 T  0 004 ----
=007E160          020 $  1 010 * 20
=007E170          020 $  1 010 * 20
=007E180          020 $  1 010 * 20
=007E190          020 $  1 010 * 20
=007E200          020 $  1 010 * 20
=007E210          023 T  0 014 *  1
=007E230     * 20 050 * 29 075    7
=007E240     * 21 124 K 17 024 J 13
=007E245          056 * 22 010 $  1
=007E250          020 * 23 024 K  2
=007E260     * 22 052 * 23 020 ----
=007E270     * 23 050 ---- 002 * 29
=007E280          124 A 45 025 A 45
=007E290     *  9 001 ---- 020 * 23     EXIT
=007E300          124 K  6 050 T  1
=007E310          074   21 056 T  1
=007E320          020 P  2 001 * 24     JUMP IF P2 NOT SET
=007E330          020 T  1 024 K 43
=007E340          050 P 10 010 * 29     SET P10
=007E350     * 24 020 T  1 050 P  2
=007E370     * 29 --- ---- --- ----,
=008E000+    =  8 010 $  0              ASSIGN BUFFER TO STN
=008E010          024 K  2 052 *  9
=008E020          020 H 10 050 H 13     SET H13
=008E030          001 *  9 024 U  5     EXIT MINUS IF NO BUFFER AVAILABLE
=008E040          052 *  1 056 *  5
=008E050     *  1 020 ---- 050 H 10     UPDATE H10
=008E060          021 J 16 050 T  0
=008E070          020 H 12 024 U  1
=008E080          052 *  2 056 *  6
=008E090     *  2 020 ---- 002 *  4
=008E100          020 H 12 050 T  1     SET BUFFER BITS IN SCR FOR NEW BUFFER
=008E110          020 H 13 052 T  1
=008E120          020 T  1 142 K 16
=008E130          010 *  5
=008E140     *  3 020 ---- 001 *  5
=008E150     *  4 024 U  5 052 *  3
=008E160          056 *  6 020 T  0
=008E170          024 I  1 050 T  0
=008E180          001 *  3 020 H 13
=008E190          050 H 10 020 K  4     BACKTRACK - STN ALREADY HAS LIMIT
=008E200          050 H 13 010 *  9
=008E210     *  5 020 K  4 050 ----     SET SUCCESSOR TO -1.
=008E220     *  6 020 H 13 050 ----     PUT NEW BUFFER ON END OF LIST FOR STN
=008E230     *  9 010 ----         ,    EXIT WITH BUFFER (OR-1) IN H13 AND AC
=009E000+    =  9 130 =  9 134 =  9
=010E000+    = 10 024 K  2 010 $  0     DEAL OUT A STORAGE SPACE
=010E010          052 *  9 020 Q  0
=010E020          001 E  0 056 *  1
=010E030     *  1 050 T  0 020 ----
=010E040          050 Q  0 020 T  0     LEAVES ADDR IN R(ACC)
=010E050     *  9 010 ----         ,
=011E000+    = 11 024 K  2 010 $  0     UNPACK (Q3) TO P4,P5,P6.
=011E010          052 *  9 020 P  4
=011E020          050 P  7 020 P  5
=011E030          050 P  8 020 P  6
=011E040          050 P  9 020 Q  3
=011E050          124 K 11 071    1
=011E060          072    1 050 P  4
=011E070          020 Q  3 124 K 12
=011E080          050 P  5 020 Q  3
=011E090          124 K 13 050 P  6
=011E100     *  9 010 ----         ,
=012E000+    = 12 004 * 92 010 *  0     PUSH Q2-Q3 OPERANDS
=013E000     = 13 004 * 92 010 * 10     POP Q2-Q3 OPERANDS
=014E000     = 14 004 * 94 010 *  0     PUSH Q4-Q5 OPERATORS
=015E000     = 15 004 * 94 010 * 10     POP Q4-Q5 OPERATORS
=016E000     = 16 004 * 96 010 *  0     PUSH Q6-Q7 AUXILIARY
=017E000     = 17 004 * 96 010 * 10     POP G6-Q7 AUXILIARY
=018E000     = 18 004 * 98 010 *  0     PUSH Q8-Q9 CONTROLS
=019E000     = 19 004 * 98 010 * 10     POP Q8-Q9 CONTROLS
=019E010     *  0 024 K  2 052 *  9
=019E020          060 T  0 056 *  1
=019E030          052 *  2 024 K  3
=019E040          052 *  5 020 Q  0
=019E050     *  1 001 E  0 004 ----
=019E060     *  2 050 ---- 056 *  3
=019E070          056 *  4 024 K  1
=019E080     *  3 056 *  5 020 ----
=019E090     *  4 050 Q  0 060 ----
=019E100     *  5 020 ---- 050 ----
=019E110     *  9 010 ----
=019E120     * 10 024 K  2 052 * 19
=019E130          060 T  0 052 * 11
=019E140          052 * 13 024 K  3
=019E150          052 * 14 004 Q  0
=019E160     * 11 020 ---- 124 K  5
=019E170          050 Q  0 056 * 12
=019E180          056 * 14 024 K  1
=019E190     * 12 056 * 13 020 ----
=019E200     * 13 050 ---- 020 ----
=019E210     * 14 050 ---- 060 ----
=019E220     * 19 010 ----
=019E230     * 92     Q  2     Q  2
=019E240     * 94     Q  4     Q  4
=019E250     * 96     Q  6     Q  6
=019E260     * 98     Q  8     Q  8,
=020E000+    = 20 010 $  0              EVALUATE DECIMAL EXPRESSION (UNSIGNED
=020E010          024 K  2 052 *  9
=020E020          020 $  0 010 = 12     PUSH Q3
=020E030          120    0 050 T  1     INITIALIZE
=020E040          020 K  4 050 P  6
=020E050          050 T  0 050 T  3
=020E060          020 P  1 010 *  2
=020E070     *  1 020 $  0 010 =  1     ADVANCE (DOESN'T DISTURB T'S)
=020E080     *  2 124 * 90 025 K 35
=020E090          001 *  5 050 P  6     JUMP IF NOT DIGIT
=020E100          025 K  1 001 *  1     LOOP IF '0'
=020E110          020 P  2 050 T  3     RECORD LOC'N OF MOST SIGNIF DIGIT
=020E120     *  3 020 $  0 010 =  1     ADVANCE
=020E130          124 * 90 025 K 35
=020E140          001 *  5 050 T  2     JUMP IF NOT DIGIT
=020E150          020 P  2 025 T  3
=020E160          025 T  1 025 * 99
=020E170          006 *  4 020 P  6     JUMP IF ALREADY NINE SIGNIF. DIGITS
=020E180          073    2 024 P  6
=020E190          073    1 024 T  2
=020E200          050 P  6 010 *  3
=020E210     *  5 020 T  0 002 * 10     JUMP IF END OF FIELD
=020E220          020 P  1 124 A 27
=020E230          025 A 27 001 * 10     JUMP IF END OF FIELD
=020E240          020 P  2 050 T  0
=020E250          020 T  3 001 *  1     LOOP IF MSD NOT YET FOUND
=020E260          020 K  3 050 T  1     CHANGE T1
=020E270     *  4 010 *  3 021 T  2     LOOP //
=020E280          002 *  3 010 E  5     LOOP IF '0' ELSE TOO MANY SIGNIF. DIG
=020E290     * 10 020 P  6 001 E  6     ERROR IF NO DIGITS
=020E300          023 P  6 006 * 15     JUMP IF ZERO RESULT
=020E310     * 11 020 T  0 002 * 12     JUMP IF DECIMAL POINT
=020E320          020 P  2 025 K  3     SPECIAL FOR INTEGER
=020E330     * 12 025 T  3 025 T  1     (MUST USE RIGHT FIELD)
=020E340          073   31 050 P  4     SET XP OF RESULT
=020E350          020 * 99 025 P  2
=020E360          024 T  3 024 T  1
=020E370          001 * 14 024 J 11     JUMP IF DP OF RESULT OK
=020E380          052 * 13 004 P  6
=020E390     * 13 032 ---- 060 P  6
=020E400     * 14 020 P  4 125 K  4
=020E410     * 15 024 P  6 050 Q  3
=020E420     *  9 010 ----
=020E430     * 90 000,0000,001,0017     SPECIAL MASK FOR DIGIT AND VALUE
=020E440     * 99        9        9,
=021E000+    = 21 124 K  6 010 $  0     EVALUATE EXPRESSION
=021E010          024 K  2 050 H 18
=021E020          020 $  0 010 = 14
=021E030          020 H 18 050 Q  5     STACK EXIT IN OPERATORS
=021E040     *  1 020 $  0 010 =  3     ELIMINATE SPACES
=021E050     *  9 124 K 29 025 K 29
=021E060          001 *  2 010 $  1
=021E070          020 $  0 010 = 12
=021E080          120    0 050 Q  3
=021E090          020 $  0 010 = 14
=021E100          020 P  1 050 Q  5
=021E110     * 22 020 $  0 010 =  2     ADVANCE
=021E120     *  2 020 P  1 071   23
=021E130          001 *  8 071    3     TO *8 IF LEFT GROUPER
=021E140          001 *  3 071    1     TO *3 IF LETTER
=021E150          001 *  7 020 P  1     TO *7 IF DIGIT
=021E160          124 A 27 025 A 27
=021E170          002 *  7 020 P  1     TO *7 IF DEC PT
=021E180          124 A 68 025 A 68
=021E190          002 * 10 010 E  6     TO *10 IF CC = '$' ELSE MALFORMED
=021E200     *  3 020 P  2 024 K  2     LETTER
=021E210          052 *  4 010 $  1
=021E220     *  4 020 ---- 050 T  0     PICK UP LOOK AHEAD CHARACTER
=021E230          124 K 34 025 K 34
=021E235          002 * 13 020 P  1     JUMP IF LETTER (HENCE FUNCTION)
=021E240          052 *  5 052 *  6
=021E245     *  5 020 ---- 005 * 15     JUMP IF NOT SCALAR
=021E250          020 $  0 010 = 12     PUSH Q3
=021E255     *  6 020 ---- 050 Q  3
=021E260     * 15 010 * 29 020 T  0
=021E265          124 A 96 025 A 96
=021E270          006 * 16 020 T  0     JUMP IF ABS VAL BAR
=021E275          124 K 31 025 K 31
=021E280     * 16 002 * 28 020 P  1     JUMP IF '(' OR LEFT BRACKET
=021E285          050 H 27 020 K  4     ERROR--SET H27 AND H28 FOR E2
=021E290          050 H 28 010 E  2
=021E300     *  7 020 $  0 010 = 20     CONVERT NUMBER
=021E310          020 * 14 010 =  3     ELIMINATE SPACES AND CONTINUE AT *20
=021E330     *  8 020 $  0 010 = 14     STACK LEFT GROUPER
=021E340          020 P  1 050 Q  5
=021E350          020 *  1 010 =  2     ADVANCE TO NONSPACE AND CONTINUE AT *
=021E370     * 10 020 $  0 010 = 12     CONVERT $
=021E380          020 P  0 025 N  1
=021E390          002 * 11 004 P  0
=021E400          032 N  8 014 * 12
=021E410     * 11 004 P  0 032 N  7
=021E420     * 12 020 K 14 064 Q  3
=021E430     * 29 020 * 14 010 =  2     ADVANCE TO NONSPACE AND CONTINUE AT *
=021E440     * 13 020 $  0 010 = 24     FUNCTION
=021E450     * 14 020 $  0 010 = 26     EVALUATE GROUPED LIST
=021E615     * 20 020 P  1 124 K 30
=021E620          025 K 30 001 * 23
=021E625          020 Q  5 124 K 30
=021E630          025 K 30 001 * 21
=021E635          020 P  1 124 K 37
=021E640          050 T  0 020 Q  5
=021E645          124 K 37 025 T  0
=021E650          002 * 24 010 $  1
=021E655     * 21 020 $  0 010 = 14     STACK OPERATOR
=021E660          020 P  1 050 Q  5
=021E665          010 * 22
=021E670     * 23 020 Q  5 124 K 30
=021E675          025 K 30 001 * 26
=021E680     * 24 020 Q  5 052 * 25
=021E685          020 $  0 024 K 2
=021E690     * 25 010 ----              FIRE OPERATOR
=021E695          020 * 14 010 = 15     POP OPERATOR AND CONTINUE AT *20
=021E705     * 26 020 Q  5 124 K 31
=021E710          025 K 31 001 * 30     JUMP TO EXIT IF NOT LEFT GROUPER
=021E712          020 $  0 010 = 77     MATCH GROUPERS
=021E714          020 P  1 124 A 96
=021E716          025 A 96 001 * 29
=021E718          020 Q  3 125 K 12     TAKE ABS VAL
=021E720          050 Q  3 010 * 29
=021E724     * 30 020 Q  5 052 * 27
=021E726          020 $  0 010 = 15     POP Q5
=021E730     * 27 010 ----              EXIT
=021E735     * 28 020 $  0 010 = 14     SUBSCRIPT
=021E740          020 P  1 124 K 17
=021E745          024 * 90 050 Q  5
=021E750          020 $  0 010 =  1
=021E755          010 * 14
=021E760     * 90 000 = 74 440 ----,
=022E000+    = 22 010 $  0 010 *  1     TYPE TIME LINE (ENTER RT SUPPRESSES E
=022E010          050 * 90 010 $  1
=022E020          020 A 31 050 S  1
=022E030          020 S  0 024 K  3
=022E040          050 P 12 010 *  2
=022E050     *  1 050 * 90 010 $  1
=022E060          020 S  0 050 P 12
=022E070     *  2 020 $  0 010 = 61     TIME
=022E080          020 $  0 010 = 62     SPACE
=022E090          020 $  0 010 = 64     DATE
=022E100              H  2     H  2
=022E110          020 $  0 010 = 62     SPACE
=022E120          020 $  0 010 = 64     INITIALS
=022E130              Z  0     Z  0
=022E140          020 $  0 010 = 64     SIX CR'S AND EOM
=022E150              * 91     * 91
=022E160          120    0 050 P  0     RESET LINE COUNTER
=022E170          020 * 90 010 = 25     EXIT VIA=25 TO OUTPUT LINE FROM S
=022E180     * 90 --- ---- --- ----     LINK
=022E190     * 91 027,0561,342,7056
=022E200          025,2000,000,0000,
=023E000+    = 23 010 $  0              EVALUATE CONDITION
=023E010          024 K  2 052 *  9
=023E020          120    0 055 *  4     SET SWITCH (ALWAYS SAVE FIRST RESULT)
=023E030     *  0 120    0 050 * 50     SET SIGNAL +
=023E040          020 $  0 010 = 21     EVALUATE EXPRESSION
=023E050     *  1 020 Q  3 050 * 51     SAVE IT
=023E060          020 $  0 010 = 13     POP Q3
=023E070          020 P  1 124 K 33
=023E080          025 K 33 001 E  6     MALFORMED IF NOT RELATION
=023E090          020 P  1 050 * 52     SAVE IT
=023E100          020 $  0 010 =  1     STEP ONE
=023E110          020 $  0 010 = 21     EVALUATE EXPRESSION
=023E120          020 * 51 050 H 21
=023E130          020 Q  3 050 H 22
=023E140          020 $  0 010 = 70     COMPARE
=023E150          124 * 52 025 K  1
=023E160          001 *  2 010 *  3
=023E170     *  2 020 K  4 050 * 50     SET - IF NOT MET
=023E180     *  3 020 P  1 124 K 33
=023E190          025 K 33 002 *  1     JUMP IF ANOTHER RELATION
=023E200          020 $  0 010 = 13     POP Q3
=023E210     *  4 020 * 50 --- *  8     SWITCH
=023E220          050 * 53 010 $  1     STORE NEW RESULT
=023E230     *  8 020 P  1 124 A109
=023E240          025 A109 002 *  7     JUMP IF PERIOD
=023E245          020 $  0 010 = 79     VERIFY PRECEDING SPACE
=023E250          020 $  0 010 = 27     ACCUMULATE WORD
=023E260          025 W 14 050 T  0
=023E270          023 T  0 002 *  5     JUMP IF 'OR'
=023E280          020 H 19 025 W 15
=023E290          050 T  0 023 T  0
=023E300          002 *  6 010 E  6     JUMP IF 'AND' ELSE MALFORMED
=023E310     *  5 020 K 35 014 *  6     OR
=023E320     *  6 020 K 34 055 *  4     AND
=023E322          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE
=023E324          010 *  0
=023E330     *  7 020 * 53 010 $  1
=023E340     *  9 010 ----              EXIT
=023E350     * 50 --- ---- --- ----     SIGNAL
=023E360     * 51 --- ---- --- ----     LEADING TERM
=023E370     * 52 --- ---- --- ----     RELATION
=023E380     * 53 --- ---- --- ----,    FINAL SIGNAL
=024E000+    = 24 010 $  0              CONVERT FUNCTION TO OPERATOR
=024E010          024 K  2 052 *  9
=024E020          020 $  0 010 = 14
=024E030          020 $  0 010 = 27
=024E040          050 T  0 004 K  2
=024E050          020 * 50 052 *  1
=024E060     *  1 020 ---- 001 E  6
=024E070          025 T  0 001 *  2
=024E080          025 K  1 005 *  3
=024E090     *  2 020 *  1 064 *  1
=024E100     *  3 010 *  1 020 *  1
=024E110          124 K  6 025 * 50
=024E120          024 * 51 050 Q  5     STACK FN AS OPERATOR IN Q5
=024E130     *  9 010 ----
=024E140     * 50     * 60
=024E150     * 51     F  0 440
=024E160     * 60 000,0002,321,2224     SQRT (ORDERED SAME AS F'S)
=024E170          000,0000,014,1707     LOG
=024E180          000,0000,005,3020     EXP
=024E190          000,0000,023,1116     SIN
=024E200          000,0000,003,1723     COS
=024E210          000,0000,000,1120     IP
=024E220          000,0000,000,0620     FP
=024E230          000,0000,000,3020     XP
=024E240          000,0000,000,0420     DP
=024E250          000,0000,023,0716     SGN
=024E260          000,0000,001,2207     ARG
=024E270          000,0000,015,0130     MAX
=024E280          000,0000,015,1116     MIN
=024E290          100,0000,000,0000,
=025E000+    = 25 010 $  0 010 *  1     OUTPUT LINE FROM S BLOCK TO STN
=025E010          024 K  2 052 P 14     SET EXIT IN P15 (INITIAL ENTRY)
=025E020     *  1 020 $  0 010 =  8     ASSIGN BUFFER (REENTRY POINT)
=025E030          001 *  3 140 S  1     LOAD BUFFER IF ASSIGNED
=025E040          020 H 12 024 U  1
=025E050          052 *  2 020 H 13
=025E060     *  2 025 ---- 001 *  5     EXIT VIA P14 IF CAN'T TL YET
=025E070          025 K  1 002 *  5     EXIT VIA P14 IF CAN'T TL YET
=025E080          020 H 12 024 K 24     OK TO TRANSMIT
=025E090          142 K 24 010 *  5     EXIT VIA P14
=025E100     *  3 020 H 10 001 *  4
=025E110          020 $  0 010 = 47     CHOKED-CHANGE STATE TO L14
=025E120              L 14     L 14
=025E130          010 *  6
=025E140     *  4 020 $  0 010 = 47     Q FOR BUFFER AND PREFERRED PROCESSING
=025E150              L 11     L 11
=025E155     *  6 020 $  0 010 = 53     KICK OUT PROGRAM
=025E160          010 X  1              EXIT TO EXECUTIVE
=025E170     *  5 020 J 22 004 I  1     COUNT ONE OUTPUT
=025E172          064 J 22 020 P  0     COUNT ONE LINE NUMBER
=025E180          064 P  0 025 J  2
=025E190          001 P 14 020 P 14
=025E200          025 K  2 010 = 22,    EXIT VIA=22 IF NEW PAGE NEEDED
=026E000+    = 26 124 K  6 010 $  0     EVALUATE GROUPED LIST
=026E010          024 K  2 050 H 18     RESULT IN Q3 AND AUX
=026E020          020 $  0 010 = 14
=026E030          020 H 18 050 Q  5     STACK EXIT IN OPERATORS
=026E040          020 P  1 124 A 73
=026E045          025 A 73 002 *  1
=026E050          020 P  1 124 A123
=026E055          025 A123 001 E  6     MALFORMED IF NOT LEFT PAREN OR BRACKE
=026E060     *  1 020 $  0 010 = 14     PUSH OPERATORS
=026E070          020 P  1 050 Q  5     STACK CHARACTER IN OPERATORS
=026E080          020 $  0 010 =  1     ADVANCE
=026E090          020 $  0 010 = 21     EVALUATE EXPRESSION
=026E100          020 P  1 124 A 59
=026E110          025 A 59 002 *  1     JUMP IF COMMA
=026E120     *  2 020 Q  5 124 A 59
=026E130          025 A 59 001 *  3     JUMP IF PREV OPERATOR NOT COMMA
=026E140          020 $  0 010 = 15     POP COMMA
=026E150          020 $  0 010 = 16     PUSH AUX
=026E160          020 Q  3 050 Q  7     SAVE VALUE OF EXPR IN AUX
=026E170          020 $  0 010 = 13     POP Q3
=026E180          010 *  2
=026E190     *  3 020 $  0 010 = 77     MATCH GROUPERS
=026E195          020 $  0 010 =  2     ADVANCE TO NONSPACE
=026E200          020 Q  5 052 *  9
=026E210          020 $  0 010 = 15     POP Q5
=026E220     *  9 010 ----         ,    EXIT
=027E000+    = 27 010 $  0              ACCUMULATE LETTER CODES (6 MAX)
=027E010          024 K  2 052 *  9     RESULT IN ACC WITH SCAN ADVANCED
=027E020          120    0 050 H 19
=027E030     *  1 020 P  1 124 K 34
=027E040          025 K 34 005 *  3
=027E050          020 H 19 004 P  1
=027E060          077    6 050 H 19
=027E070          020 P  2 024 K  3
=027E080          054 P  2 052 *  2
=027E090     *  2 020 ---- 050 P  1
=027E100          020 H 19 025 K 12
=027E110     *  3 001 *  1 020 H 19     LEAVE RESULT IN ACC AND H19
=027E120     *  9 010 ----         ,
=028E000+    = 28 010 $  0              ERASE LEFT LINKED LIST A/C MQ
=028E010          024 K  2 052 *  9
=028E020          060 T  0 124 K  6
=028E030          050 T  0 010 $  1
=028E040     *  1 023 T  0 002 *  9
=028E050          020 T  0 052 *  2
=028E060          052 *  3 070   21
=028E070          004 Q  0 050 Q  0
=028E080     *  2 020 ---- 052 T  0
=028E090     *  3 060 ---- 010 *  1
=028E100     *  9 010 ----         ,
=029E000+    = 29 010 $  0              ERASE RIGHT LINKED LIST A/C MQ
=029E010          024 K  2 052 *  9
=029E020          060 T  0 124 K  5
=029E030          050 T  0 010 $  1
=029E040     *  1 023 T  0 002 *  9
=029E050          020 T  0 056 *  2
=029E060          056 *  3 004 Q  0
=029E070     *  2 050 Q  0 020 ----
=029E080     *  3 056 T  0 060 ----
=029E090          010 *  1
=029E100     *  9 010 ----         ,
=030E000+    = 30 010 $  0              CHECK RANGE AND PACK RESULT
=030E010          024 K  2 052 *  9
=030E015          023 P  6 006 *  3     CHK FOR ZERO
=030E020          020 P  4 005 *  1
=030E030          025 * 90 005 *  2
=030E040     *  1 010 E  1 024 * 91
=030E050          006 *  2 120    0
=030E060     *  2 014 *  3 020 P  4
=030E070          024 P  5 024 P  6
=030E080     *  3 125 K  4 050 Q  3
=030E090     *  9 010 ----
=030E100     * 90+         100    8
=030E110     * 91+          99    8,
=031E000+    = 31 010 $  0              ADD
=031E010          024 K  2 052 *  9
=031E020          020 $  0 010 = 11     UNPACK 2ND OPERAND
=031E030          020 *  1 010 = 13     POP Q3 AND MERGE WITH =32
=032E000     = 32 010 $  0              SUBTRACT
=032E010          024 K  2 052 *  9
=032E020          020 $  0 010 = 11     UNPACK 2ND OPERAND
=032E030          020 K 12 025 P  5     INVERT SIGN OF 2ND OPERAND
=032E040          050 P  5 010 $  1
=032E050     *  1 020 $  0 010 = 13     POP Q3
=032E060          023 P  6 002 *  9     DONE IF 2ND OPERAND IS ZERO
=032E070          023 Q  3 002 *  8     PACK UP IF 1ST OPERAND IS ZERO
=032E080          020 $  0 010 = 11     UNPACK 1ST OPERAND
=032E090          020 P  4 025 P  7
=032E100          001 *  2 025 K  1     TO *2 IF 2ND SFX IS GREATER
=032E110          002 *  3 020 P  6     TO    IF 1ST SFX IS GREATER
=032E120          025 P  9 002 *  3     TO    IF 1ST CD IS GREATER OR EQUAL
=032E130     *  2 020 P  4 004 P  7     INTERCHANGE OPERANDS
=032E140          050 P  7 060 P  4
=032E150          020 P  5 004 P  8
=032E160          050 P  8 060 P  5
=032E170          020 P  6 004 P  9
=032E180          050 P  9 060 P  6
=032E190     *  3 020 P  5 024 P  8
=032E200          071    9 002 *  4     TO *4 IF SIGNS ARE ALIKE
=032E210          021 P  9 050 P  9     ELSE COMPLEMENT CF OF SMALLER NUMBER
=032E220     *  4 020 P  4 025 P  7
=032E230          025 * 90 002 *  8     TO *8 IF SFX DIFF AS BIG AS 11
=032E240          024 * 90 072   10
=032E250          024 J 11 052 *  5
=032E260     *  5 004 ---- 060 T  0     SET DECIMAL SHIFTER
=032E270          020 P  9 077    1
=032E280          036 P  6 044 T  0     DEVELOP TWICE SUM IN MQ
=032E290          050 T  2 060 T  1     SAVE PIECES
=032E340     * 10 023 T  1 001 * 11
=032E350          023 T  2 001 * 11
=032E360          050 Q  3 010 *  9     SET ZERO RESULT AND EXIT
=032E370     * 11 020 T  1 025 * 91
=032E380          002 * 13 004 N  1
=032E390          032 T  2 044 T  0     SCALE UP ONE DIGIT
=032E400          060 T  3 004 N  1
=032E410          036 T  1 020 P  4
=032E420     * 12 025 K 14 050 P  4     ADJUST SFX
=032E430          060 T  3 025 * 91
=032E440          002 * 13 032 N  1
=032E450          020 P  4 010 * 12     SCALE UP AND GO TO *12
=032E452     * 13 060 T  3 025 * 92
=032E454          001 * 14 020 P  4
=032E456          024 K 14 050 P  4
=032E458          120    0 044 N  1
=032E460     * 14 060 T  3 024 K  1     ROUND
=032E465          072    1 050 P  6       AND SET CF OF RESULT
=032E470     *  8 020 $  0 010 = 30     PACK UP RESULT
=032E480     *  9 010 ----              EXIT
=032E490     * 90+          11    8
=032E500     * 91+   200000000   39
=032E510     * 92+  1999999999   39,
=033E000+    = 33 010 $  0              MULTIPLY
=033E010          024 K  2 052 *  9
=033E020          020 $  0 010 = 11
=033E030          020 $  0 010 = 13
=033E040          023 P  6 001 *  1
=033E050          050 Q  3 010 *  9
=033E060     *  1 023 Q  3 002 *  9
=033E070          020 $  0 010 = 11
=033E080          020 N  9 070    1
=033E090          004 P  9 036 P  6
=033E100          050 T  0 025 * 90
=033E110          001 *  3 025 N  0
=033E120          002 *  2 021 * 91
=033E130          064 T  1 001 *  3
=033E140     *  2 020 T  0 044 N  9
=033E150          060 P  6 020 P  4
=033E160          024 P  7 024 K 14
=033E170          050 P  4 010 *  6
=033E180     *  3 021 * 92 064 T  1
=033E190          004 T  1 001 *  4
=033E200          020 T  0 010 *  5
=033E210     *  4 020 T  0 025 N  0
=033E220     *  5 044 N  8 060 P  6
=033E230          020 P  4 024 P  7
=033E240          050 P  4 010 $  1
=033E250     *  6 020 P  5 024 P  8
=033E260          124 K 12 050 P  5
=033E270          020 $  0 010 = 30
=033E280     *  9 010 ----
=033E290     * 90+      181898   39
=033E300     * 91+517415400576   39
=033E310     * 92+   450000000   39,
=034E000+    = 34 010 $  0              DIVIDE
=034E010          024 K  2 052 *  9
=034E020          023 Q  3 002 E  3
=034E030          020 $  0 010 = 11
=034E040          020 $  0 010 = 13
=034E050          023 Q  3 002 *  9
=034E060          020 $  0 010 = 11
=034E070          020 N  8 050 T  0
=034E080          020 P  4 025 P  7
=034E090          050 P  4 020 P  6
=034E100          025 P  9 002 *  1
=034E110          020 N  9 050 T  0
=034E120          020 P  4 025 K 14
=034E130          050 P  4 010 $  1
=034E140     *  1 020 P  9 072    1
=034E150          004 P  6 036 T  0
=034E160          044 P  9 060 P  6
=034E170          020 P  5 024 P  8
=034E180          124 K 12 050 P  5
=034E190          020 $  0 010 = 30
=034E200     *  9 010 ----         ,
=036E000+    = 36 010 $  0              CONVERT H20 FOR OUTPUT FROM S
=036E010          024 K  2 052 *  1       020 $  0 010 = 36
=036E020          024 K  2 052 *  9              K        N
=036E030     *  1 020 ---- 024 * 90     WHERE K=OPTION AND N=NBR OF DIGITS
=036E040          052 * 10 124 K  5     K=1 SKIP LOADING ZEROS
=036E050          025 I  1 050 T  0     K=2 SPACE FOR LEADING ZEROES
=036E060          120    0 050 *  3     K=3 FORCE LEADING ZEROES
=036E070     * 10 010 ----              K=4 FORCE LEADING, SKIP TRAILING ZE
=036E080     * 11 020 * 91 014 *  2
=036E090     * 12 020 * 92 014 *  2
=036E100     * 13 020 *  6 014 *  2
=036E110     * 14 020 * 94 050 *  3
=036E120     *  2 020 *  6 050 *  5
=036E130     *  3 --- ---- --- ----
=036E140          020 T  0 024 J 11
=036E150          056 *  4 120    0
=036E160     *  4 004 H 20 044 ----
=036E170          050 H 20 063 T  1
=036E180          002 *  5 020 *  6
=036E190          050 *  5 010 * 20
=036E200     *  5 --- ---- --- ----
=036E210     *  6 004 A 48 010 * 20
=036E220     *  7 004 A 14 010 * 20
=036E230     * 20 020 P 12 024 K  3
=036E240          050 P 12 056 * 21
=036E250     * 21 060 P 11 050 ----
=036E260     * 22 020 T  0 025 I  1
=036E270          050 T  0 002 *  3
=036E280     *  9 010 ----              EXIT
=036E290     * 90     * 10
=036E300     * 91 023 T  0 001 * 22
=036E310     * 92 023 T  0 001 *  7
=036E320     * 94 023 H 20 002 *  9,
=037E000+    = 37 024 K  2 010 $  0     SIMPLE DIRECT TESTS
=037E010          052 *  9 020 Q  9
=037E020          002 E  9 010 *  1     ERROR IF INDIRECT, JUMP INTO =38
=038E000     = 38 024 K  2 010 $  0     SIMPLE INDIRECT TESTS
=038E010          052 *  9 020 Q  9
=038E020          001 E 10 010 *  1     ERROR IF DIRECT
=038E030     *  1 020 $  0 010 =  3     ELIMINATE SPACES
=038E040          124 K 19 025 K 19
=038E050     *  9 002 ---- 010 E  6,    EXIT IF TERMINAL ELSE MALFORMED
=039E000+    = 39 050 T  0 010 $  0     VERIFY SPACE AND ADVANCE TO NONSPACE
=039E010          020 P  1 124 A 14
=039E020          025 A 14 001 E  6     ERROR IF NOT SPACE
=039E030          020 T  0 010 =  2,    WADE INTO ADVANCE TO NONSPACE
=040E000+    = 40 010 $  0              POSITIVE INTEGER TEST ON (Q3)
=040E010          024 K  2 052 *  9
=040E020          020 $  0 010 = 11
=040E030          021 P  6 001 *  1
=040E040     *  2 020 K  4 010 *  9
=040E050     *  1 021 P  5 001 *  9
=040E060          020 P  4 001 *  9
=040E070          025 J 18 002 *  2     (J18) = 9X2*(-8)
=040E080          021 P  4 072   10
=040E090          024 J 14 052 *  3
=040E100          120    0 004 P  6
=040E110     *  3 044 ---- 025 K  1
=040E120          002 *  2 120    0
=040E130     *  9 010 ----         ,    EXIT + OR - A/C TEST
=041E000+    = 41 010 $  0              SUBSCRIPT RANGE TEST AND REPL (Q3)
=041E010          024 K  2 052 *  9
=041E020          023 Q  3 002 *  9
=041E030          020 $  0 010 = 11
=041E040          023 P  5 001 E  4
=041E050          020 P  4 001 E  4
=041E060          025 K 14 002 *  1
=041E070          020 N  8 014 *  2
=041E080     *  1 025 K 14 002 E  4
=041E090     *  2 020 N  7 050 T  0
=041E100          120    0 004 P  6
=041E110          044 T  0 025 K  1
=041E120          002 E  4 060 T  0
=041E130     *  3 071   12 050 Q  3
=041E140     *  9 010 ----         ,
=042E000+    = 42 130 = 42 134 = 42
=043E000+    = 43 130 = 43 134 = 43
=044E000+    = 44 010 $  0              PART NUMBER TEST ON (Q3)
=044E010          024 K  2 052 *  9
=044E020          020 $  0 010 = 40
=044E030     *  9 002 ---- 010 E 18,
=045E000+    = 45 010 $  0              STEP NUMBER TEST ON (Q3)
=045E010          024 K  2 052 *  9
=045E020          023 Q  3 002 E 13
=045E030          020 Q  3 071    1
=045E040          001 E 13 071    8
=045E050          001 E 13 020 Q  3
=045E060          025 J 18 002 E 13
=045E070     *  9 010 ----         ,
=046E000+    = 46 010 $  0              FORM NUMBER TEST ON (Q3)
=046E010          024 K  2 052 *  9
=046E020          020 $  0 010 = 40
=046E030     *  9 002 ---- 010 E 12,
=047E000+    = 47 010 $  0              PUT STN AT END OF STATE IN $1.
=047E010          024 K  2 052 *  6
=047E020          024 K  2 052 *  9
=047E030          020 H 12 024 U  0
=047E040          052 *  1 056 *  6
=047E050          020 H 12 024 U  3
=047E060          052 *  4 056 *  5
=047E070     *  1 020 ---- 056 *  2
=047E080     *  2 056 *  4 020 ----
=047E090          050 T  0 025 H 12
=047E100          005 *  3 025 K  1
=047E110     *  3 001 *  4 020 T  0
=047E120          024 U  3 014 *  1
=047E130     *  4 020 ---- 050 ----     CLOSE GAP IN OLD STATE LIST
=047E140     *  5 020 K  4 050 ----     SET NULL SUCCESSOR FOR STN
=047E150     *  6 020 ---- 050 ----     SET NEW STATE FOR STN
=047E160     *  7 052 *  8 056 * 10
=047E170     *  8 020 ---- 001 * 10
=047E180          024 U  3 010 *  7
=047E190     * 10 020 H 12 050 ----     ADD STN TO END OF NEW STATE LIST
=047E200     *  9 010 ----         ,
=048E000+    = 48 010 $  0              'TO' ROUTINE
=048E010          024 K  2 052 *  9
=048E030          020 H  9 124 K 17
=048E040          142 K 35 050 H 12     ERASE SIGNAL
=048E050          071   21 052 H 12     SET STN CONTEXT
=048E060          020 $  0 010 = 58     RELEASE CURRENT BUFFER
=048E070          001 *  1 020 H 12
=048E080          024 K 24 142 K 24     TL NEXT BUFFER TO STN
=048E090     *  1 020 H 12 024 U  0
=048E100          052 *  2 020 K  5
=048E110     *  2 124 ---- 025 * 90
=048E120          001 *  8 025 I  1
=048E130          001 *  3 025 I  7     TO *3 IF STATE=L6
=048E140          001 *  8 025 I  1
=048E150          001 *  5 010 *  8
=048E160     *  3 020 H 13 024 U  5     STATE=L6
=048E170          052 *  4 010 $  1
=048E180     *  4 020 ---- 002 *  8
=048E190          020 $  0 010 = 47     ON LAST BUFFER - SWITCH TO USER
=048E200              L 10     L 10
=048E210          020 H 12 024 K 36
=048E220          142 K 36 010 *  8     CL+SU THEN EXIT
=048E230     *  5 020 J 17 050 T  0     STATE = L14
=048E240          020 H 12 024 U  1
=048E250          052 *  7 010 *  7
=048E260     *  6 024 U  5 052 *  7
=048E270          020 T  0 025 I  1
=048E280          050 T  0 001 *  8     EXIT IF STILL CHOKING
=048E290     *  7 020 ---- 002 *  6     LOOP IF BUFFER TO COUNT
=048E300          020 $  0 010 = 47     ELSE UNCHOKE
=048E310              L 11     L 11
=048E315     *  8 020 L 13 050 H 12     RESET H12 TO STN IN L13
=048E320     *  9 010 ----              EXIT
=048E330     * 90              L  6,
=049E000+    = 49 024 K  2 010 $  0     UPDATE ACTIVITY OF STN
=049E010          052 *  9 020 H 12
=049E020          024 U  4 052 *  1
=049E030          020 $  0 010 =  0
=049E040     *  1 050 ---- 010 $  1
=049E050     *  9 010 ----         ,
=050E000+    = 50 010 $  0              FIND PART (P20)
=050E010          024 K  2 052 *  9
=050E020          020 J 10 050 H 22
=050E030          020 Q 10 050 H 23
=050E040     *  1 020 H 22 050 H 21
=050E050          020 H 23 050 H 22
=050E060          056 *  2 024 K  1
=050E070     *  2 056 *  3 020 ----
=050E080          050 H 23 001 *  9     EXIT MINUS IF CAN'T FIND
=050E090     *  3 020 P 20 025 ----
=050E100          001 *  1 025 K  1
=050E110          002 *  1 020 H 23     OUTPUT LOCATOR IN ACC
=050E120     *  9 010 ----         ,    H21, H22, H23 HOLD USEFUL POINTERS
=051E000+    = 51 010 $  0              FIND STEP (P21)
=051E010          024 K  2 052 *  9
=051E020          020 P 21 070   31
=051E030          124 K  5 050 H 21
=051E040          020 J 14 025 H 21
=051E050          056 *  4 010 $  1
=051E060          020 J 10 050 H 22
=051E070          020 Q 10 050 H 23
=051E080     *  1 020 H 22 050 H 21
=051E090          020 H 23 050 H 22
=051E100          056 *  2 024 K  1
=051E110     *  2 056 *  3 020 ----
=051E120     *  8 050 H 23 001 *  9     EXIT MINUS IF CAN'T FIND
=051E130     *  3 020 P 21 025 ----
=051E140     *  4 001 *  8 025 ----     EXIT MINUS IF CAN'T FIND AND LEAVE H2
=051E150          002 *  1 020 H 22
=051E160          071   21 124 K  6
=051E170          050 H 25 020 H 23
=051E180          050 H 26 010 $  1
=051E190     *  5 020 H 25 050 H 24
=051E200          020 H 26 050 H 25
=051E210          052 *  6 024 K  2
=051E220          052 *  7 010 $  1
=051E230     *  6 020 ---- 050 H 26
=051E240          001 *  9 020 P 21     EXIT MINUS IF CAN'T FIND
=051E250     *  7 025 ---- 001 *  9     EXIT MINUS IF CAN'T FIND
=051E260          025 K  1 002 *  5
=051E270          020 H 26 010 $  1     OUTPUT LOCATOR IN ACC
=051E280     *  9 010 ----         ,    H21-H26 HOLD USEFUL INFO ON EXIT
=052E000+    = 52 010 $  0              FIND FORM (P22)
=052E010          024 K  2 052 *  9
=052E020          020 J 10 050 H 25
=052E030          020 Q 11 050 H 26
=052E040     *  1 020 H 25 050 H 24
=052E050          020 H 26 050 H 25
=052E060          052 *  2 024 K  2
=052E070          052 *  3 010 $  1
=052E080     *  2 020 ---- 050 H 26
=052E090          001 *  9 020 P 22     EXIT MINUS IF CAN'T FIND
=052E100     *  3 025 ---- 001 *  9
=052E110          025 K  1 002 *  1
=052E120          020 H 26 010 $  1     OUTPUT LOCATOR IN ACC AND H26
=052E130     *  9 010 ----         ,    H24 LOCATES PREDECESSOR ON EXIT
=053E000+    = 53 010 $  0              KICK OUT CURRENT PROGRAM (IF ANY)
=053E010          024 K  2 052 *  9
=053E020          020 H  7 001 *  9
=053E030          024 U  2 052 *  1
=053E032          020 $  0 010 =  0     ACCUMULATE TIME WORKED
=053E034          025 H  8 024 J 23
=053E036          050 J 23 010 $  1
=053E040     *  1 020 ---- 055 * 90
=053E050          004 * 90 111,6000     (FOR 1024 WORD USER BLOCK)
=053E060          020 K  4 050 H  7
=053E070     *  9 010 ----
=053E080     * 90 000,0000,000,1777,    CONSTRUCTED DRUM CONTROL WORD
=054E000+    = 54 010 $  0              BRING IN PROGRAM (IF ANY) A/C STN
=054E010          024 K  2 052 *  9
=054E020          020 $  0 010 = 53     KICK OUT CURRENT PROGRAM IF ANY
=054E030          020 H 12 024 U  2
=054E040          052 *  1 010 $  1
=054E050     *  1 020 ---- 001 *  9
=054E060          055 * 90 010 $  1
=054E070          004 * 90 110,6000     (FOR 1024 WORD USER BLOCK)
=054E080          020 H 12 050 H  7
=054E090          020 $  0 010 = 49     UPDATE STATION ACTIVITY
=054E100          050 H  8 010 $  1     SET START TIME OF CURRENT SHOT
=054E110     *  9 010 ----
=054E120     * 90 000,0000,000,1777,    CONSTRUCTED DRUM CONTROL WORD
=055E000+    = 55 010 $  0              SWITCH TO USER (CL+SU)
=055E010          024 K  2 052 *  9     (ASSUMES SUBSTATE OF L10 ALREADY IN P
=055E015          020 K  4 050 P 16     CLEAR P16 BEFORE SWITCHING
=055E020          050 P 15 020 H 12     ALSO CLEAR P15
=055E030          024 U  1 052 *  1
=055E032          020 Q  8 001 *  1     JUMP IF Q8 MINUS
=055E034          050 Q 12 020 Q  9     HIDE 08-09
=055E036          050 Q 13 020 K  4
=055E038          050 Q  8 050 Q  9
=055E040     *  1 020 ---- 001 *  3
=055E050          024 U  5 052 *  2
=055E060     *  2 020 ---- 001 *  4
=055E070          020 $  0 010 = 47     CHANGE STATE TO L6 WHILE DRAINING
=055E080              L  6     L  6
=055E090          010 *  9
=055E100     *  3 020 $  0 010 =  8     ASSIGN INPUT BUFFER
=055E110          002 *  4 010 $  1     TO *4 IF ASSIGNED
=055E120          020 $  0 010 = 47     CHANGE STATE TO L7 IF NO BUFFER AVAIL
=055E130              L  7     L  7
=055E140          010 *  9
=055E150     *  4 020 H 12 024 K 36     OK TO SWITCH
=055E160          142 K 36 010 $  1     CL+SU
=055E170          020 $  0 010 = 47     CHANGE STATE TO L10 GREEN
=055E180              L 10     L 10
=055E190     *  9 010 ----         ,
=056E000+    = 56 010 $  0              ERASE STEP A/C H21-H26
=056E010          024 K  2 052 *  9
=056E020          020 $  0 010 = 57     STEP LOOKS JUST LIKE FORM HERE
=056E030          020 H 22 056 *  1
=056E040     *  1 020 K  6 124 ----
=056E050          025 K  1 002 *  9     EXIT UNLESS PART NOW EMPTY
=056E060          020 H 21 056 *  2
=056E070     *  2 020 H 23 056 ----
=056E080          020 H 22 071   61
=056E090          020 $  0 010 = 28     ERASE LEFT LINKED LIST (ONE ITEM HERE
=056E100     *  9 010 ----         ,
=057E000+    = 57 010 $  0              ERASE FORM A/C H24-H26
=057E010          024 K  2 052 *  9
=057E020          020 H 24 052 *  1
=057E030          020 H 26 010 $  1
=057E040     *  1 052 ---- 010 $  1
=057E050          020 H 25 071   19
=057E060          020 $  0 010 = 29     ERASE RIGHT LINKED LIST A/C MQ
=057E070     *  9 010 ----         ,
=058E000+    = 58 010 $  0              RELEASE CURRENT BUFFER FOR STN
=058E010          024 K  2 052 *  9       SERVICES L7 WITH FREE BUFFER AND
=058E020          020 H 12 050 * 92       LEAVES NEXT BUFFER OR -1 IN ACC AND
=058E030          024 U  1 052 *  1
=058E040          056 *  8 010 $  1
=058E050     *  1 020 ---- 050 H 13
=058E055          002 $  1 010 *  9
=058E060          024 U  5 056 *  2
=058E070     *  2 056 *  3 004 ----     PICK UP NEXT BUFFER (IF ANY)
=058E080     *  3 020 K  4 050 ----     SET SUCCESSOR OF OLD BUFFER TO -1
=058E090          060 * 93 050 T  0
=058E100          020 H 12 056 T  0
=058E110          020 T  0 142 K 16     SET BUFFER BITS IN SCR FOR NEW BUFFER
=058E120          020 * 91 010 $  1     FIND TAIL OF H10 LIST
=058E130     *  4 052 *  5 056 *  6
=058E140     *  5 020 ---- 001 *  6
=058E150          024 U  5 010 *  4
=058E160     *  6 020 H 13 050 ----     PUT OLD BUFFER ON END OF H10 LIST
=058E170          020 L  7 005 *  7     SERVICE L7
=058E180          050 H 12 010 $  1
=058E190          020 $  0 010 =  8     ASSIGN BUFFER
=058E200          020 $  0 010 = 47     CHANGE STATE TO L10
=058E210              L 10     L 10
=058E220          020 H 12 024 K 36     CL+SU
=058E230          142 K 36 020 * 92
=058E240     *  7 050 H 12 020 * 93     RESTORE STN CONTEXT
=058E250     *  8 050 H 13 050 ----     LEAVE NEXT BUFFER OR -1 IN ACC AND H1
=058E260     *  9 010 ----              EXIT
=058E270     * 91     H 10     H 10
=058E280     * 92                       PRIVATE STORAGE FOR STN
=058E290     * 93                  ,    PRIVATE STORAGE FOR BUFFER
=059E000+    = 59 130 = 59 134 = 59
=060E000+    = 60 130 = 60 134 = 60
=061E000+    = 61 010 $  0              CONVERT TIME FOR OUTPUT
=061E010          024 K  2 052 *  9
=061E020          020 $  0 010 =  0     READ THE CLOCK
=061E030          120    0 004 H  1
=061E040          044 J  1 120    0
=061E050          044 J  0 036 N  2
=061E060          060 H 20 010 $  1
=061E070          020 $  0 010 = 36
=061E080                 3        4
=061E090     *  9 010 ----         ,
=062E000+    = 62 050 T  0 010 $  0     INSERT SPACE IN OUTPUT REGION S
=062E010          020 A 14 050 P 11
=062E020          020 T  0 010 = 66,
=063E000+    = 63 130 = 63 134 = 63
=064E000+    = 64 010 $  0              UNPACK MSG TO S FOR OUTPUT COMPISTIO
=064E010          024 K  2 052 *  1       020 $  0 010 = 64
=064E020          024 K  2 052 *  9              M        M
=064E030     *  1 020 ---- 052 *  2     WHERE 'M' IS LOCN OF MSG
=064E040     *  2 020 ---- 050 T  0
=064E050     *  3 020 T  0 001 *  9
=064E060          071    8 050 T  0
=064E070          020 P 12 024 K  3
=064E080          050 P 12 052 *  4
=064E090     *  4 060 ---- 023 T  0
=064E100          001 *  3 020 *  2
=064E110          024 K  2 014 *  1
=064E120     *  9 010 ----         ,
=065E000+    = 65 130 = 65 134 = 65
=066E000+    = 66 010 $  0              PUT (P11) IN NEXT S CELL (P12)+1
=066E010          024 K  2 052 *  9
=066E020          020 P 12 024 K  3
=066E030          050 P 12 056 *  1
=066E040     *  1 020 P 11 050 ----
=066E050     *  9 010 ----         ,
=067E000+    = 67 130 = 67 134 = 67
=068E000+    = 68 010 $  0              COMPUTE PART (P20) FOR STEP (P21)
=068E010          024 K  2 052 *  9
=068E020          020 P 21 124 K 11
=068E030          050 T  0 070   10
=068E040          050 T  1 020 J 14
=068E045          025 T  1 052 *  1     ASSUMES (P21) IS LEGITIMATE
=068E050          052 *  2 020 P 21
=068E060          124 K 13 072   39
=068E070     *  1 044 ---- 020 T  0
=068E080     *  2 036 ---- 060 P 20
=068E090     *  9 010 ----         ,
=069E000+    = 69 130 = 69 134 = 69
=070E000+    = 70 010 $  0              COMPARE (H21) W (H22)
=070E010     *  1 024 K  2 052 *  9
=070E020          020 H 21 025 H 22
=070E030          005 *  2 025 K  1
=070E040     *  2 001 * 12 023 H 22
=070E050          005 *  3 020 H 21
=070E060          071    9 001 * 11
=070E070     *  3 010 * 13 023 H 21
=070E080          005 *  4 020 H 22
=070E090          071    9 001 * 13
=070E100     *  4 010 * 11 020 H 21
=070E110          124 K 12 024 H 22
=070E120          124 K 12 025 K 12
=070E130          005 *  5 020 H 21
=070E140          071    9 001 * 11
=070E150     *  5 010 * 13 020 H 22
=070E160          071    1 072    1
=070E170          050 T  0 020 H 21
=070E180          071    1 072    1
=070E190          025 T  0 001 *  6
=070E200          020 H 21 071    9
=070E210          002 * 13 010 * 11
=070E220     *  6 020 H 21 071    9
=070E230          002 * 11 010 * 13
=070E240     * 11 020 K 26 010 *  9     LESS
=070E250     * 12 020 K 25 010 *  9     EQUAL
=070E260     * 13 020 K 24 010 *  9     GREATER
=070E270     *  9 010 ----         ,    EXIT WITH RELATION IN ACC
071E000+     = 71 010 $  0              FIND SINGLE INDEXED VALUE
071E010           024 K  2 052 *  9       H26 HOLDS LETTER
071E020           020 H 27 052 *  1       H28 HOLDS INDEX
071E030           070   21 050 H 22       ASSUME LETTER IS SINGLY INDEXED
071E040      *  1 020 ---- 050 H 23
071E050      *  2 020 H 22 050 H 21
071E060           020 H 23 056 *  3
071E070      *  3 050 H 22 020 ----
071E080           050 H 23 001 *  9     JUMP IF CAN'T FIND AND EXIT MINUS
071E090           124 K 42 025 H 28
071E100           001 *  2 025 K  1     JUMP IF NO MATCH AND TRY NEXT
071E110           006 *  9 020 H 22     JUMP IF NO MATCH POSSIBLE
071E120           024 K  1 124 K  5
071E130      *  9 010 ---- 020 K  4     LEAVE + POINTER IN ACC IF FOUND
071E014           050 H 23 010 *  9,    EXIT - WITH H23 MINUS.
=072E000+    = 72 010 $  0              FIND DOUBLY INDEXED VALUE
=072E010          024 K  2 052 *  9       H27 HOLDS LETTER
=072E020          020 $  0 010 = 71       H28 HOLDS FIRST INDEX
=072E030          001 *  9 020 H 22       H29 HOLDS SECOND INDEX
=072E040          071   21 050 H 25     ASSUME LETTER IS DOUBLY INDEXED
=072E050          020 H 23 050 H 26
=072E060     *  1 020 H 25 050 H 24
=072E070          020 H 26 050 H 25
=072E080          052 *  2 010 $  1
=072E090     *  2 020 ---- 050 H 26
=072E100          001 *  9 124 K 42
=072E110          025 H 29 001 *  1
=072E120          025 K  1 001 *  3
=072E130          020 K  4 010 *  9
=072E140     *  3 020 H 25 024 K  2
=072E150     *  9 010 ----         ,    EXIT
=073E000+    = 73 010 $  0              ASSIGN VALUE A/C H27-H30
=073E010          024 K  2 052 *  9
=073E020          020 H 29 002 * 20     JUMP FOR MATRIX ELEMENT
=073E030          020 H 28 002 * 10     JUMP FOR VECTOR ELEMENT
=073E040          020 H 27 052 *  1     SIMPLE VALUE TO ASSIGN
=073E050          052 *  3 010 $  1
=073E060     *  1 020 ---- 002 *  2     JUMP IF ALREADY SIMPLE
=073E070          025 K  1 002 *  2     JUMP IF UNDEFINED
=073E080          020 $  0 010 = 75     ERASE VALUES FOR LETTER H27
=073E090     *  2 020 H 30 010 $  1
=073E100     *  3 050 ---- 010 $  1     ASSIGN SIMPLE VALUE
=073E110     *  9 010 ----              EXIT
=073E120     * 10 020 Q  0 001 E  0     VECTOR ELEMENT TO ASSIGN
=073E130          020 H 27 052 * 11
=073E140     * 11 020 ---- 002 * 12
=073E150          071    6 001 * 14     JUMP IF LETTER NOW A VECTOR
=073E160     * 12 020 $  0 010 = 75     ERASE VALUE(S) FOR LETTER H27
=073E170          020 H 27 052 * 13
=073E180          020 K 39 010 $  1
=073E190     * 13 050 ---- 010 $  1
=073E200     * 14 020 $  0 010 = 71     FIND SINGLE INDEXED VALUE
=073E210          056 * 17 002 * 17     JUMP IF FOUND
=073E220          020 H 21 056 * 15
=073E230          020 $  0 010 = 10     GET A SPACE
=073E240     * 15 056 * 16 056 ----
=073E250          024 K  1 056 * 17
=073E260          020 H 22 124 K  5
=073E270     * 16 024 H 28 050 ----
=073E280     * 17 020 H 30 050 ----
=073E290          010 *  9
=073E300     * 20 020 Q  0 056 * 21     MATRIX ELEMENT TO ASSIGN
=073E310     * 21 001 E  0 020 ----     CHECK SPACE
=073E320          002 $  1 010 E  0
=073E330          020 H 27 052 * 22
=073E340     * 22 020 ---- 002 * 23
=073E350          071    5 001 * 25     JUMP IF LETTER NOW A MATRIX
=073E360     * 23 020 $  0 010 = 75     ERASE VALUE(S) FOR LETTER H27
=073E370          020 H 27 052 * 24
=073E380          020 K 38 010 $  1
=073E390     * 24 050 ---- 010 $  1
=073E400     * 25 020 $  0 010 = 72     FIND DOUBLE INDEXED VALUE
=073E410          052 * 31 006 * 30     JUMP IF FOUND
=073E420          020 H 23 002 * 28     JUMP IF ROW EXISTS
=073E430          020 H 21 056 * 26
=073E440          020 $  0 010 = 10     GET A SPACE
=073E450     * 26 056 * 27 056 ----
=073E460          071   21 050 H 24
=073E470          020 H 22 124 K  5
=073E480     * 27 024 H 28 050 ----
=073E490          050 H 25 010 $  1
=073E500     * 28 020 H 24 052 * 29
=073E510          020 $  0 010 = 10     GET A SPACE
=073E520          071   21 052 * 30
=073E530     * 29 052 ---- 024 K  2
=073E540          052 * 31 020 H 25
=073E550          124 K  6 024 H 29
=073E560     * 30 050 ---- 020 H 30
=073E570     * 31 050 ---- 010 *  9,
=074E000+    = 74 010 $  0              EVALUATE INDEXED LETTER
=074E010          024 K  2 052 *  9
=074E020          020 Q  7 050 H 29
=074E030          020 Q  6 001 *  1     JUMP IF Q7 EMPTY
=074E040          020 $  0 010 = 17     POP Q7
=074E050          020 Q  6 002 E  6     MALFORMED IF EXTRA INDICES
=074E060     *  1 020 $  0 010 = 41     CHECK AND CONVERT FIRST INDEX
=074E070          020 Q  3 050 H 28
=074E080          020 Q  5 024 J 13
=074E090          071   21 052 *  2
=074E100     *  2 020 ---- 050 H 27     SET LETTER
=074E110          052 *  3 052 *  6
=074E120          020 H 29 002 *  5     JUMP IF DOUBLE INDEX
=074E130     *  3 020 ---- 002 E  2     UNDEFINED IF SCALAR
=074E140          071    6 002 E  2     UNDEFINED IF NOT VECTOR
=074E150          020 $  0 010 = 71
=074E160          001 E  2 056 *  4     UNDEFINED IF CAN'T FIND
=074E170     *  4 070    0 020 ----
=074E180          050 Q  3 010 *  9     SET RESULT AND EXIT
=074E190     *  5 050 Q  3 010 $  1
=074E200          020 $  0 010 = 41     CHECK AND CONVERT SECOND INDEX
=074E210          020 Q  3 050 H 29
=074E220     *  6 020 ---- 002 E  2     UNDEFINED IF SCALAR
=074E230          071    5 002 E  2     UNDEFINED IF NOT MATRIX
=074E240          020 $  0 010 = 72
=074E250          001 E  2 052 *  7     UNDEFINED IF CAN'T FIND
=074E260     *  7 020 ---- 050 Q  3     SET RESULT
=074E270     *  9 010 ----         ,    EXIT
=075E000+    = 75 010 $  0              ERASE VALUE(S) FOR LETTER H27
=075E010          024 K  2 052 *  9
=075E020          020 H 27 052 *  1
=075E030          052 * 12 010 $  1
=075E040     *  1 020 ---- 002 * 11     JUMP IF LETTER HAS SIMPLE VALUE
=075E050          050 * 90 071    5
=075E060          001 * 20 071    1     JUMP IF MATRIX
=075E070          001 * 10 010 *  9     JUMP IF VECTOR ELSE UNDEFINED
=075E080     * 10 004 * 90 010 $  1     VECTOR
=075E090          020 $  0 010 = 29     ERASE RIGHT LINKED LIST
=075E100     * 11 020 K  4 010 $  1
=075E110     * 12 050 ---- 010 $  1     UNDEFINE THE LETTER
=075E120     *  9 010 ----              EXIT
=075E130     * 20 020 * 90 014 * 21     MATRIX
=075E140     * 21 020 * 91 056 * 22
=075E150          124 K  5 025 K  1
=075E160     * 22 001 * 10 004 ----
=075E170          060 * 91 010 $  1
=075E180          020 $  0 010 = 28     ERASE LEFT LINKED LIST
=075E190          010 * 21
=075E200     * 90                       LOCAL STORAGE
=075E210     * 91                  ,    LOCAL STORAGE
=076E000+    = 76 010 $  0              ERASE ONE LEVEL OF CONTROL STRUCTURE
=076E010          024 K  2 052 *  9
=076E020          020 Q  8 052 *  1     ASSUME STRUCTURE EXISTS OFF Q8L
=076E030     *  1 020 ---- 005 *  2
=076E040          052 *  1 075   40
=076E050          020 $  0 010 = 29
=076E060     *  2 010 *  1 004 Q  8
=076E070          020 $  0 010 = 28
=076E080          020 $  0 010 = 19
=076E090     *  9 010 ----         ,
=077E000+    = 77 010 $  0              MATCH GROUPERS
=077E010          024 K  2 052 *  9
=077E020          020 P  1 052 *  1
=077E030          050 J 20 124 K 32     LEAVE RIGHT GROUPER FOR DO AND G14
=077E040          025 K 32 001 E  6     ERROR IF NOT RIGHT GROUPER
=077E050     *  1 020 ---- 124 Q  5
=077E060          025 Q  5 001 E  6     ERROR IF NO MATCH WITH PREV OPERATOR
=077E070          020 $  0 010 = 15     POP OPERATOR
=077E080     *  9 010 ----         ,    EXIT
=078E000+    = 78 010 $  0              TRANSMIT LINE AND RESTORE
=078E010          024 K  2 052 P 25     DRUM ROUTINE IF NECESSARY
=078E020          020 H 17 050 P 24     SAVE DRUM CW
=078E030          020 $  0 010 = 25     TRANSMIT
=078E040          020 H 17 025 P 24
=078E050          050 T  0 023 T  0
=078E060          002 P 25 004 P 24     EXIT VIA P25 IF STILL INTACT
=078E070          060 H 17 110 M  0     ELSE READ FROM DRUM
=078E080          010 P 25         ,    THEN EXIT
=079E000+    = 79 024 K  2 010 $  0     VERIFY PRECEDING SPACE
=079E010          052 *  9 020 P  2
=079E020          025 K  3 052 *  1
=079E030     *  1 020 ---- 124 A 14
=079E040          025 A 14 001 E  6
=079E050     *  9 010 ----         ,